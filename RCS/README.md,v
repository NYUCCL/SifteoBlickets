head	1.494;
access;
symbols;
locks
	j:1.494; strict;
comment	@# @;
expand	@o@;


1.494
date	2013.03.22.16.05.09;	author j;	state Exp;
branches;
next	1.493;

1.493
date	2013.03.22.16.04.36;	author j;	state Exp;
branches;
next	1.492;

1.492
date	2013.03.22.16.04.22;	author j;	state Exp;
branches;
next	1.491;

1.491
date	2013.03.22.16.01.53;	author j;	state Exp;
branches;
next	1.490;

1.490
date	2013.03.22.16.01.39;	author j;	state Exp;
branches;
next	1.489;

1.489
date	2013.03.22.16.01.13;	author j;	state Exp;
branches;
next	1.488;

1.488
date	2013.03.22.16.00.53;	author j;	state Exp;
branches;
next	1.487;

1.487
date	2013.03.22.16.00.49;	author j;	state Exp;
branches;
next	1.486;

1.486
date	2013.03.22.16.00.02;	author j;	state Exp;
branches;
next	1.485;

1.485
date	2013.03.22.15.59.34;	author j;	state Exp;
branches;
next	1.484;

1.484
date	2013.03.22.15.59.00;	author j;	state Exp;
branches;
next	1.483;

1.483
date	2013.03.22.15.58.44;	author j;	state Exp;
branches;
next	1.482;

1.482
date	2013.03.22.15.57.13;	author j;	state Exp;
branches;
next	1.481;

1.481
date	2013.03.22.15.57.04;	author j;	state Exp;
branches;
next	1.480;

1.480
date	2013.03.22.15.56.26;	author j;	state Exp;
branches;
next	1.479;

1.479
date	2013.03.22.15.55.49;	author j;	state Exp;
branches;
next	1.478;

1.478
date	2013.03.22.15.55.08;	author j;	state Exp;
branches;
next	1.477;

1.477
date	2013.03.22.15.54.24;	author j;	state Exp;
branches;
next	1.476;

1.476
date	2013.03.22.15.53.23;	author j;	state Exp;
branches;
next	1.475;

1.475
date	2013.03.22.15.49.56;	author j;	state Exp;
branches;
next	1.474;

1.474
date	2013.03.22.15.49.25;	author j;	state Exp;
branches;
next	1.473;

1.473
date	2013.03.22.15.45.26;	author j;	state Exp;
branches;
next	1.472;

1.472
date	2013.03.22.15.45.06;	author j;	state Exp;
branches;
next	1.471;

1.471
date	2013.03.22.15.42.21;	author j;	state Exp;
branches;
next	1.470;

1.470
date	2013.03.22.15.40.43;	author j;	state Exp;
branches;
next	1.469;

1.469
date	2013.03.22.15.40.24;	author j;	state Exp;
branches;
next	1.468;

1.468
date	2013.03.22.15.38.29;	author j;	state Exp;
branches;
next	1.467;

1.467
date	2013.03.22.15.38.03;	author j;	state Exp;
branches;
next	1.466;

1.466
date	2013.03.22.15.37.12;	author j;	state Exp;
branches;
next	1.465;

1.465
date	2013.03.22.15.37.07;	author j;	state Exp;
branches;
next	1.464;

1.464
date	2013.03.22.15.36.43;	author j;	state Exp;
branches;
next	1.463;

1.463
date	2013.03.22.15.33.37;	author j;	state Exp;
branches;
next	1.462;

1.462
date	2013.03.22.15.33.23;	author j;	state Exp;
branches;
next	1.461;

1.461
date	2013.03.22.15.32.56;	author j;	state Exp;
branches;
next	1.460;

1.460
date	2013.03.22.15.32.29;	author j;	state Exp;
branches;
next	1.459;

1.459
date	2013.03.22.15.31.56;	author j;	state Exp;
branches;
next	1.458;

1.458
date	2013.03.22.15.30.57;	author j;	state Exp;
branches;
next	1.457;

1.457
date	2013.03.22.15.23.05;	author j;	state Exp;
branches;
next	1.456;

1.456
date	2013.03.22.15.22.07;	author j;	state Exp;
branches;
next	1.455;

1.455
date	2013.03.22.15.21.47;	author j;	state Exp;
branches;
next	1.454;

1.454
date	2013.03.22.15.21.18;	author j;	state Exp;
branches;
next	1.453;

1.453
date	2013.03.22.15.21.04;	author j;	state Exp;
branches;
next	1.452;

1.452
date	2013.03.22.15.19.48;	author j;	state Exp;
branches;
next	1.451;

1.451
date	2013.03.22.15.19.01;	author j;	state Exp;
branches;
next	1.450;

1.450
date	2013.03.22.15.17.36;	author j;	state Exp;
branches;
next	1.449;

1.449
date	2013.03.22.15.17.30;	author j;	state Exp;
branches;
next	1.448;

1.448
date	2013.03.22.15.15.52;	author j;	state Exp;
branches;
next	1.447;

1.447
date	2013.03.22.15.15.20;	author j;	state Exp;
branches;
next	1.446;

1.446
date	2013.03.22.15.14.43;	author j;	state Exp;
branches;
next	1.445;

1.445
date	2013.03.22.15.14.17;	author j;	state Exp;
branches;
next	1.444;

1.444
date	2013.03.22.15.13.05;	author j;	state Exp;
branches;
next	1.443;

1.443
date	2013.03.22.15.09.38;	author j;	state Exp;
branches;
next	1.442;

1.442
date	2013.03.22.15.08.27;	author j;	state Exp;
branches;
next	1.441;

1.441
date	2013.03.22.15.07.56;	author j;	state Exp;
branches;
next	1.440;

1.440
date	2013.03.22.15.07.40;	author j;	state Exp;
branches;
next	1.439;

1.439
date	2013.03.22.15.07.19;	author j;	state Exp;
branches;
next	1.438;

1.438
date	2013.03.22.15.06.56;	author j;	state Exp;
branches;
next	1.437;

1.437
date	2013.03.22.15.05.59;	author j;	state Exp;
branches;
next	1.436;

1.436
date	2013.03.22.15.05.42;	author j;	state Exp;
branches;
next	1.435;

1.435
date	2013.03.22.15.05.01;	author j;	state Exp;
branches;
next	1.434;

1.434
date	2013.03.22.15.04.38;	author j;	state Exp;
branches;
next	1.433;

1.433
date	2013.03.22.15.03.53;	author j;	state Exp;
branches;
next	1.432;

1.432
date	2013.03.22.15.03.07;	author j;	state Exp;
branches;
next	1.431;

1.431
date	2013.03.22.15.02.42;	author j;	state Exp;
branches;
next	1.430;

1.430
date	2013.03.22.15.02.37;	author j;	state Exp;
branches;
next	1.429;

1.429
date	2013.03.22.15.01.46;	author j;	state Exp;
branches;
next	1.428;

1.428
date	2013.03.22.15.00.32;	author j;	state Exp;
branches;
next	1.427;

1.427
date	2013.03.22.14.59.34;	author j;	state Exp;
branches;
next	1.426;

1.426
date	2013.03.22.14.58.11;	author j;	state Exp;
branches;
next	1.425;

1.425
date	2013.03.22.14.57.29;	author j;	state Exp;
branches;
next	1.424;

1.424
date	2013.03.22.14.56.21;	author j;	state Exp;
branches;
next	1.423;

1.423
date	2013.03.22.14.54.33;	author j;	state Exp;
branches;
next	1.422;

1.422
date	2013.03.22.14.48.56;	author j;	state Exp;
branches;
next	1.421;

1.421
date	2013.03.22.14.47.41;	author j;	state Exp;
branches;
next	1.420;

1.420
date	2013.03.22.14.47.14;	author j;	state Exp;
branches;
next	1.419;

1.419
date	2013.03.22.14.46.55;	author j;	state Exp;
branches;
next	1.418;

1.418
date	2013.03.22.14.46.32;	author j;	state Exp;
branches;
next	1.417;

1.417
date	2013.03.22.14.43.41;	author j;	state Exp;
branches;
next	1.416;

1.416
date	2013.03.22.14.42.36;	author j;	state Exp;
branches;
next	1.415;

1.415
date	2013.03.20.17.59.00;	author j;	state Exp;
branches;
next	1.414;

1.414
date	2013.03.20.17.55.12;	author j;	state Exp;
branches;
next	1.413;

1.413
date	2013.03.20.17.54.00;	author j;	state Exp;
branches;
next	1.412;

1.412
date	2013.03.20.17.53.08;	author j;	state Exp;
branches;
next	1.411;

1.411
date	2013.03.20.17.52.29;	author j;	state Exp;
branches;
next	1.410;

1.410
date	2013.03.20.17.49.20;	author j;	state Exp;
branches;
next	1.409;

1.409
date	2013.03.19.22.19.02;	author j;	state Exp;
branches;
next	1.408;

1.408
date	2013.03.19.22.18.51;	author j;	state Exp;
branches;
next	1.407;

1.407
date	2013.03.19.22.18.22;	author j;	state Exp;
branches;
next	1.406;

1.406
date	2013.03.19.22.17.23;	author j;	state Exp;
branches;
next	1.405;

1.405
date	2013.03.19.22.15.55;	author j;	state Exp;
branches;
next	1.404;

1.404
date	2013.03.19.22.11.34;	author j;	state Exp;
branches;
next	1.403;

1.403
date	2013.03.19.22.11.04;	author j;	state Exp;
branches;
next	1.402;

1.402
date	2013.03.19.22.06.57;	author j;	state Exp;
branches;
next	1.401;

1.401
date	2013.03.19.22.04.31;	author j;	state Exp;
branches;
next	1.400;

1.400
date	2013.03.19.22.04.24;	author j;	state Exp;
branches;
next	1.399;

1.399
date	2013.03.19.22.03.45;	author j;	state Exp;
branches;
next	1.398;

1.398
date	2013.03.19.22.02.55;	author j;	state Exp;
branches;
next	1.397;

1.397
date	2013.03.19.22.01.26;	author j;	state Exp;
branches;
next	1.396;

1.396
date	2013.03.19.21.54.43;	author j;	state Exp;
branches;
next	1.395;

1.395
date	2013.03.19.21.52.32;	author j;	state Exp;
branches;
next	1.394;

1.394
date	2013.03.19.21.49.26;	author j;	state Exp;
branches;
next	1.393;

1.393
date	2013.03.19.21.48.50;	author j;	state Exp;
branches;
next	1.392;

1.392
date	2013.03.19.21.48.34;	author j;	state Exp;
branches;
next	1.391;

1.391
date	2013.03.19.21.48.20;	author j;	state Exp;
branches;
next	1.390;

1.390
date	2013.03.19.21.47.57;	author j;	state Exp;
branches;
next	1.389;

1.389
date	2013.03.19.21.42.39;	author j;	state Exp;
branches;
next	1.388;

1.388
date	2013.03.19.21.37.33;	author j;	state Exp;
branches;
next	1.387;

1.387
date	2013.03.19.21.37.24;	author j;	state Exp;
branches;
next	1.386;

1.386
date	2013.03.19.21.36.52;	author j;	state Exp;
branches;
next	1.385;

1.385
date	2013.03.19.21.36.33;	author j;	state Exp;
branches;
next	1.384;

1.384
date	2013.03.19.21.34.39;	author j;	state Exp;
branches;
next	1.383;

1.383
date	2013.03.19.21.32.29;	author j;	state Exp;
branches;
next	1.382;

1.382
date	2013.03.19.21.31.38;	author j;	state Exp;
branches;
next	1.381;

1.381
date	2013.03.19.21.29.28;	author j;	state Exp;
branches;
next	1.380;

1.380
date	2013.03.19.21.29.01;	author j;	state Exp;
branches;
next	1.379;

1.379
date	2013.03.19.21.26.50;	author j;	state Exp;
branches;
next	1.378;

1.378
date	2013.03.19.21.26.32;	author j;	state Exp;
branches;
next	1.377;

1.377
date	2013.03.19.21.26.23;	author j;	state Exp;
branches;
next	1.376;

1.376
date	2013.03.19.21.25.26;	author j;	state Exp;
branches;
next	1.375;

1.375
date	2013.03.19.21.25.14;	author j;	state Exp;
branches;
next	1.374;

1.374
date	2013.03.19.21.24.41;	author j;	state Exp;
branches;
next	1.373;

1.373
date	2013.03.19.21.23.39;	author j;	state Exp;
branches;
next	1.372;

1.372
date	2013.03.19.21.22.35;	author j;	state Exp;
branches;
next	1.371;

1.371
date	2013.03.19.21.22.18;	author j;	state Exp;
branches;
next	1.370;

1.370
date	2013.03.19.21.21.44;	author j;	state Exp;
branches;
next	1.369;

1.369
date	2013.03.19.21.21.28;	author j;	state Exp;
branches;
next	1.368;

1.368
date	2013.03.19.21.20.53;	author j;	state Exp;
branches;
next	1.367;

1.367
date	2013.03.19.21.20.28;	author j;	state Exp;
branches;
next	1.366;

1.366
date	2013.03.19.21.19.33;	author j;	state Exp;
branches;
next	1.365;

1.365
date	2013.03.19.21.19.01;	author j;	state Exp;
branches;
next	1.364;

1.364
date	2013.03.19.21.18.21;	author j;	state Exp;
branches;
next	1.363;

1.363
date	2013.03.19.21.17.41;	author j;	state Exp;
branches;
next	1.362;

1.362
date	2013.03.19.21.17.12;	author j;	state Exp;
branches;
next	1.361;

1.361
date	2013.03.19.21.16.50;	author j;	state Exp;
branches;
next	1.360;

1.360
date	2013.03.19.21.16.03;	author j;	state Exp;
branches;
next	1.359;

1.359
date	2013.03.19.21.15.36;	author j;	state Exp;
branches;
next	1.358;

1.358
date	2013.03.19.21.15.15;	author j;	state Exp;
branches;
next	1.357;

1.357
date	2013.03.19.21.14.45;	author j;	state Exp;
branches;
next	1.356;

1.356
date	2013.03.19.21.14.06;	author j;	state Exp;
branches;
next	1.355;

1.355
date	2013.03.19.21.13.48;	author j;	state Exp;
branches;
next	1.354;

1.354
date	2013.03.19.21.12.14;	author j;	state Exp;
branches;
next	1.353;

1.353
date	2013.03.19.21.11.44;	author j;	state Exp;
branches;
next	1.352;

1.352
date	2013.03.19.21.11.15;	author j;	state Exp;
branches;
next	1.351;

1.351
date	2013.03.19.21.08.43;	author j;	state Exp;
branches;
next	1.350;

1.350
date	2013.03.19.21.08.17;	author j;	state Exp;
branches;
next	1.349;

1.349
date	2013.03.19.21.05.54;	author j;	state Exp;
branches;
next	1.348;

1.348
date	2013.03.19.21.05.17;	author j;	state Exp;
branches;
next	1.347;

1.347
date	2013.03.19.21.00.41;	author j;	state Exp;
branches;
next	1.346;

1.346
date	2013.03.19.21.00.29;	author j;	state Exp;
branches;
next	1.345;

1.345
date	2013.03.19.20.57.54;	author j;	state Exp;
branches;
next	1.344;

1.344
date	2013.03.19.20.57.26;	author j;	state Exp;
branches;
next	1.343;

1.343
date	2013.03.19.20.56.41;	author j;	state Exp;
branches;
next	1.342;

1.342
date	2013.03.19.20.56.13;	author j;	state Exp;
branches;
next	1.341;

1.341
date	2013.03.19.20.55.51;	author j;	state Exp;
branches;
next	1.340;

1.340
date	2013.03.19.20.54.47;	author j;	state Exp;
branches;
next	1.339;

1.339
date	2013.03.19.20.54.15;	author j;	state Exp;
branches;
next	1.338;

1.338
date	2013.03.19.20.53.48;	author j;	state Exp;
branches;
next	1.337;

1.337
date	2013.03.19.20.53.04;	author j;	state Exp;
branches;
next	1.336;

1.336
date	2013.03.19.20.52.35;	author j;	state Exp;
branches;
next	1.335;

1.335
date	2013.03.19.20.51.10;	author j;	state Exp;
branches;
next	1.334;

1.334
date	2013.03.19.20.34.53;	author j;	state Exp;
branches;
next	1.333;

1.333
date	2013.03.19.20.34.18;	author j;	state Exp;
branches;
next	1.332;

1.332
date	2013.03.19.20.33.53;	author j;	state Exp;
branches;
next	1.331;

1.331
date	2013.03.19.20.32.01;	author j;	state Exp;
branches;
next	1.330;

1.330
date	2013.03.19.20.31.49;	author j;	state Exp;
branches;
next	1.329;

1.329
date	2013.03.19.20.25.49;	author j;	state Exp;
branches;
next	1.328;

1.328
date	2013.03.19.20.25.15;	author j;	state Exp;
branches;
next	1.327;

1.327
date	2013.03.19.20.25.05;	author j;	state Exp;
branches;
next	1.326;

1.326
date	2013.03.19.20.24.40;	author j;	state Exp;
branches;
next	1.325;

1.325
date	2013.03.19.20.23.09;	author j;	state Exp;
branches;
next	1.324;

1.324
date	2013.03.19.20.22.39;	author j;	state Exp;
branches;
next	1.323;

1.323
date	2013.03.19.20.22.23;	author j;	state Exp;
branches;
next	1.322;

1.322
date	2013.03.19.20.21.55;	author j;	state Exp;
branches;
next	1.321;

1.321
date	2013.03.19.20.18.15;	author j;	state Exp;
branches;
next	1.320;

1.320
date	2013.03.19.20.17.59;	author j;	state Exp;
branches;
next	1.319;

1.319
date	2013.03.19.20.16.46;	author j;	state Exp;
branches;
next	1.318;

1.318
date	2013.03.19.20.16.08;	author j;	state Exp;
branches;
next	1.317;

1.317
date	2013.03.19.20.15.10;	author j;	state Exp;
branches;
next	1.316;

1.316
date	2013.03.19.20.14.30;	author j;	state Exp;
branches;
next	1.315;

1.315
date	2013.03.19.20.13.00;	author j;	state Exp;
branches;
next	1.314;

1.314
date	2013.03.19.20.10.51;	author j;	state Exp;
branches;
next	1.313;

1.313
date	2013.03.19.20.06.12;	author j;	state Exp;
branches;
next	1.312;

1.312
date	2013.03.19.20.04.01;	author j;	state Exp;
branches;
next	1.311;

1.311
date	2013.03.19.20.03.44;	author j;	state Exp;
branches;
next	1.310;

1.310
date	2013.03.19.20.02.33;	author j;	state Exp;
branches;
next	1.309;

1.309
date	2013.03.19.20.01.08;	author j;	state Exp;
branches;
next	1.308;

1.308
date	2013.03.19.20.00.58;	author j;	state Exp;
branches;
next	1.307;

1.307
date	2013.03.19.20.00.44;	author j;	state Exp;
branches;
next	1.306;

1.306
date	2013.03.19.20.00.12;	author j;	state Exp;
branches;
next	1.305;

1.305
date	2013.03.19.20.00.02;	author j;	state Exp;
branches;
next	1.304;

1.304
date	2013.03.19.19.58.51;	author j;	state Exp;
branches;
next	1.303;

1.303
date	2013.03.19.19.57.38;	author j;	state Exp;
branches;
next	1.302;

1.302
date	2013.03.19.19.56.59;	author j;	state Exp;
branches;
next	1.301;

1.301
date	2013.03.19.19.56.06;	author j;	state Exp;
branches;
next	1.300;

1.300
date	2013.03.19.19.55.54;	author j;	state Exp;
branches;
next	1.299;

1.299
date	2013.03.19.19.53.23;	author j;	state Exp;
branches;
next	1.298;

1.298
date	2013.03.19.19.50.27;	author j;	state Exp;
branches;
next	1.297;

1.297
date	2013.03.19.19.49.22;	author j;	state Exp;
branches;
next	1.296;

1.296
date	2013.03.19.19.47.18;	author j;	state Exp;
branches;
next	1.295;

1.295
date	2013.03.19.19.46.51;	author j;	state Exp;
branches;
next	1.294;

1.294
date	2013.03.19.19.45.36;	author j;	state Exp;
branches;
next	1.293;

1.293
date	2013.03.19.19.44.10;	author j;	state Exp;
branches;
next	1.292;

1.292
date	2013.03.19.19.41.17;	author j;	state Exp;
branches;
next	1.291;

1.291
date	2013.03.19.19.37.04;	author j;	state Exp;
branches;
next	1.290;

1.290
date	2013.03.19.19.36.27;	author j;	state Exp;
branches;
next	1.289;

1.289
date	2013.03.19.19.35.14;	author j;	state Exp;
branches;
next	1.288;

1.288
date	2013.03.19.19.31.23;	author j;	state Exp;
branches;
next	1.287;

1.287
date	2013.03.19.19.30.56;	author j;	state Exp;
branches;
next	1.286;

1.286
date	2013.03.19.19.30.07;	author j;	state Exp;
branches;
next	1.285;

1.285
date	2013.03.19.19.26.23;	author j;	state Exp;
branches;
next	1.284;

1.284
date	2013.03.19.19.25.19;	author j;	state Exp;
branches;
next	1.283;

1.283
date	2013.03.19.19.24.55;	author j;	state Exp;
branches;
next	1.282;

1.282
date	2013.03.19.19.24.30;	author j;	state Exp;
branches;
next	1.281;

1.281
date	2013.03.19.19.22.30;	author j;	state Exp;
branches;
next	1.280;

1.280
date	2013.03.19.19.18.32;	author j;	state Exp;
branches;
next	1.279;

1.279
date	2013.03.19.19.15.11;	author j;	state Exp;
branches;
next	1.278;

1.278
date	2013.03.19.19.15.00;	author j;	state Exp;
branches;
next	1.277;

1.277
date	2013.03.19.19.14.53;	author j;	state Exp;
branches;
next	1.276;

1.276
date	2013.03.19.19.13.37;	author j;	state Exp;
branches;
next	1.275;

1.275
date	2013.03.19.19.12.59;	author j;	state Exp;
branches;
next	1.274;

1.274
date	2013.03.19.19.11.50;	author j;	state Exp;
branches;
next	1.273;

1.273
date	2013.03.19.19.11.03;	author j;	state Exp;
branches;
next	1.272;

1.272
date	2013.03.19.19.10.58;	author j;	state Exp;
branches;
next	1.271;

1.271
date	2013.03.19.19.10.25;	author j;	state Exp;
branches;
next	1.270;

1.270
date	2013.03.19.19.10.09;	author j;	state Exp;
branches;
next	1.269;

1.269
date	2013.03.19.19.09.49;	author j;	state Exp;
branches;
next	1.268;

1.268
date	2013.03.19.19.07.59;	author j;	state Exp;
branches;
next	1.267;

1.267
date	2013.03.19.19.07.29;	author j;	state Exp;
branches;
next	1.266;

1.266
date	2013.03.19.19.02.22;	author j;	state Exp;
branches;
next	1.265;

1.265
date	2013.03.19.18.54.23;	author j;	state Exp;
branches;
next	1.264;

1.264
date	2013.03.19.18.48.59;	author j;	state Exp;
branches;
next	1.263;

1.263
date	2013.03.19.18.48.44;	author j;	state Exp;
branches;
next	1.262;

1.262
date	2013.03.19.18.48.23;	author j;	state Exp;
branches;
next	1.261;

1.261
date	2013.03.19.18.48.04;	author j;	state Exp;
branches;
next	1.260;

1.260
date	2013.03.19.18.37.57;	author j;	state Exp;
branches;
next	1.259;

1.259
date	2013.03.18.00.16.12;	author j;	state Exp;
branches;
next	1.258;

1.258
date	2013.03.18.00.09.56;	author j;	state Exp;
branches;
next	1.257;

1.257
date	2013.03.18.00.09.53;	author j;	state Exp;
branches;
next	1.256;

1.256
date	2013.03.18.00.08.37;	author j;	state Exp;
branches;
next	1.255;

1.255
date	2013.03.18.00.08.07;	author j;	state Exp;
branches;
next	1.254;

1.254
date	2013.03.17.23.44.30;	author j;	state Exp;
branches;
next	1.253;

1.253
date	2013.03.17.21.31.25;	author j;	state Exp;
branches;
next	1.252;

1.252
date	2013.03.17.21.28.25;	author j;	state Exp;
branches;
next	1.251;

1.251
date	2013.03.17.21.27.01;	author j;	state Exp;
branches;
next	1.250;

1.250
date	2013.03.17.21.26.54;	author j;	state Exp;
branches;
next	1.249;

1.249
date	2013.03.17.21.26.42;	author j;	state Exp;
branches;
next	1.248;

1.248
date	2013.03.17.21.26.05;	author j;	state Exp;
branches;
next	1.247;

1.247
date	2013.03.17.21.25.50;	author j;	state Exp;
branches;
next	1.246;

1.246
date	2013.03.17.21.23.38;	author j;	state Exp;
branches;
next	1.245;

1.245
date	2013.03.17.21.23.19;	author j;	state Exp;
branches;
next	1.244;

1.244
date	2013.03.17.21.22.15;	author j;	state Exp;
branches;
next	1.243;

1.243
date	2013.03.17.21.21.50;	author j;	state Exp;
branches;
next	1.242;

1.242
date	2013.03.17.21.19.53;	author j;	state Exp;
branches;
next	1.241;

1.241
date	2013.03.17.21.17.57;	author j;	state Exp;
branches;
next	1.240;

1.240
date	2013.03.17.21.17.51;	author j;	state Exp;
branches;
next	1.239;

1.239
date	2013.03.17.21.17.32;	author j;	state Exp;
branches;
next	1.238;

1.238
date	2013.03.17.21.11.52;	author j;	state Exp;
branches;
next	1.237;

1.237
date	2013.03.17.21.10.23;	author j;	state Exp;
branches;
next	1.236;

1.236
date	2013.03.17.21.10.07;	author j;	state Exp;
branches;
next	1.235;

1.235
date	2013.03.17.21.09.31;	author j;	state Exp;
branches;
next	1.234;

1.234
date	2013.03.17.21.09.26;	author j;	state Exp;
branches;
next	1.233;

1.233
date	2013.03.17.21.08.57;	author j;	state Exp;
branches;
next	1.232;

1.232
date	2013.03.17.21.08.49;	author j;	state Exp;
branches;
next	1.231;

1.231
date	2013.03.17.21.08.41;	author j;	state Exp;
branches;
next	1.230;

1.230
date	2013.03.17.21.08.32;	author j;	state Exp;
branches;
next	1.229;

1.229
date	2013.03.17.21.08.08;	author j;	state Exp;
branches;
next	1.228;

1.228
date	2013.03.17.21.06.55;	author j;	state Exp;
branches;
next	1.227;

1.227
date	2013.03.17.21.06.10;	author j;	state Exp;
branches;
next	1.226;

1.226
date	2013.03.17.21.05.51;	author j;	state Exp;
branches;
next	1.225;

1.225
date	2013.03.17.21.05.32;	author j;	state Exp;
branches;
next	1.224;

1.224
date	2013.03.17.21.05.18;	author j;	state Exp;
branches;
next	1.223;

1.223
date	2013.03.17.21.05.05;	author j;	state Exp;
branches;
next	1.222;

1.222
date	2013.03.17.21.03.42;	author j;	state Exp;
branches;
next	1.221;

1.221
date	2013.03.17.21.03.20;	author j;	state Exp;
branches;
next	1.220;

1.220
date	2013.03.17.21.02.48;	author j;	state Exp;
branches;
next	1.219;

1.219
date	2013.03.17.21.02.21;	author j;	state Exp;
branches;
next	1.218;

1.218
date	2013.03.17.20.57.15;	author j;	state Exp;
branches;
next	1.217;

1.217
date	2013.03.17.20.55.37;	author j;	state Exp;
branches;
next	1.216;

1.216
date	2013.03.17.20.55.17;	author j;	state Exp;
branches;
next	1.215;

1.215
date	2013.03.17.20.52.44;	author j;	state Exp;
branches;
next	1.214;

1.214
date	2013.03.17.20.52.18;	author j;	state Exp;
branches;
next	1.213;

1.213
date	2013.03.17.20.50.37;	author j;	state Exp;
branches;
next	1.212;

1.212
date	2013.03.17.20.49.48;	author j;	state Exp;
branches;
next	1.211;

1.211
date	2013.03.17.20.49.40;	author j;	state Exp;
branches;
next	1.210;

1.210
date	2013.03.17.20.45.18;	author j;	state Exp;
branches;
next	1.209;

1.209
date	2013.03.17.20.44.30;	author j;	state Exp;
branches;
next	1.208;

1.208
date	2013.03.17.20.42.31;	author j;	state Exp;
branches;
next	1.207;

1.207
date	2013.03.17.20.40.57;	author j;	state Exp;
branches;
next	1.206;

1.206
date	2013.03.17.20.40.41;	author j;	state Exp;
branches;
next	1.205;

1.205
date	2013.03.17.20.39.47;	author j;	state Exp;
branches;
next	1.204;

1.204
date	2013.03.17.20.37.23;	author j;	state Exp;
branches;
next	1.203;

1.203
date	2013.03.17.20.33.43;	author j;	state Exp;
branches;
next	1.202;

1.202
date	2013.03.17.20.33.34;	author j;	state Exp;
branches;
next	1.201;

1.201
date	2013.03.17.20.33.20;	author j;	state Exp;
branches;
next	1.200;

1.200
date	2013.03.17.20.32.53;	author j;	state Exp;
branches;
next	1.199;

1.199
date	2013.03.17.20.31.11;	author j;	state Exp;
branches;
next	1.198;

1.198
date	2013.03.17.20.30.42;	author j;	state Exp;
branches;
next	1.197;

1.197
date	2013.03.17.20.30.04;	author j;	state Exp;
branches;
next	1.196;

1.196
date	2013.03.17.20.29.21;	author j;	state Exp;
branches;
next	1.195;

1.195
date	2013.03.17.20.28.10;	author j;	state Exp;
branches;
next	1.194;

1.194
date	2013.03.17.20.20.45;	author j;	state Exp;
branches;
next	1.193;

1.193
date	2013.03.17.20.18.53;	author j;	state Exp;
branches;
next	1.192;

1.192
date	2013.03.17.20.18.44;	author j;	state Exp;
branches;
next	1.191;

1.191
date	2013.03.17.20.18.33;	author j;	state Exp;
branches;
next	1.190;

1.190
date	2013.03.17.20.17.02;	author j;	state Exp;
branches;
next	1.189;

1.189
date	2013.03.17.20.15.52;	author j;	state Exp;
branches;
next	1.188;

1.188
date	2013.03.17.20.15.45;	author j;	state Exp;
branches;
next	1.187;

1.187
date	2013.03.17.20.14.44;	author j;	state Exp;
branches;
next	1.186;

1.186
date	2013.03.17.20.12.45;	author j;	state Exp;
branches;
next	1.185;

1.185
date	2013.03.17.20.12.35;	author j;	state Exp;
branches;
next	1.184;

1.184
date	2013.03.17.20.12.05;	author j;	state Exp;
branches;
next	1.183;

1.183
date	2013.03.17.20.10.42;	author j;	state Exp;
branches;
next	1.182;

1.182
date	2013.03.17.20.10.38;	author j;	state Exp;
branches;
next	1.181;

1.181
date	2013.03.17.20.10.29;	author j;	state Exp;
branches;
next	1.180;

1.180
date	2013.03.17.20.09.46;	author j;	state Exp;
branches;
next	1.179;

1.179
date	2013.03.17.19.42.40;	author j;	state Exp;
branches;
next	1.178;

1.178
date	2013.03.17.19.42.11;	author j;	state Exp;
branches;
next	1.177;

1.177
date	2013.03.17.19.41.52;	author j;	state Exp;
branches;
next	1.176;

1.176
date	2013.03.17.19.41.35;	author j;	state Exp;
branches;
next	1.175;

1.175
date	2013.03.17.19.40.32;	author j;	state Exp;
branches;
next	1.174;

1.174
date	2013.03.17.19.39.44;	author j;	state Exp;
branches;
next	1.173;

1.173
date	2013.03.17.19.39.24;	author j;	state Exp;
branches;
next	1.172;

1.172
date	2013.03.17.19.37.20;	author j;	state Exp;
branches;
next	1.171;

1.171
date	2013.03.17.19.36.58;	author j;	state Exp;
branches;
next	1.170;

1.170
date	2013.03.17.19.36.11;	author j;	state Exp;
branches;
next	1.169;

1.169
date	2013.03.17.19.32.57;	author j;	state Exp;
branches;
next	1.168;

1.168
date	2013.03.17.19.29.36;	author j;	state Exp;
branches;
next	1.167;

1.167
date	2013.03.17.19.28.46;	author j;	state Exp;
branches;
next	1.166;

1.166
date	2013.03.17.19.28.08;	author j;	state Exp;
branches;
next	1.165;

1.165
date	2013.03.17.19.27.06;	author j;	state Exp;
branches;
next	1.164;

1.164
date	2013.03.17.19.26.25;	author j;	state Exp;
branches;
next	1.163;

1.163
date	2013.03.17.19.23.04;	author j;	state Exp;
branches;
next	1.162;

1.162
date	2013.03.17.19.22.50;	author j;	state Exp;
branches;
next	1.161;

1.161
date	2013.03.17.19.22.06;	author j;	state Exp;
branches;
next	1.160;

1.160
date	2013.03.17.19.21.28;	author j;	state Exp;
branches;
next	1.159;

1.159
date	2013.03.17.19.16.55;	author j;	state Exp;
branches;
next	1.158;

1.158
date	2013.03.17.19.16.34;	author j;	state Exp;
branches;
next	1.157;

1.157
date	2013.03.17.19.15.17;	author j;	state Exp;
branches;
next	1.156;

1.156
date	2013.03.17.19.14.47;	author j;	state Exp;
branches;
next	1.155;

1.155
date	2013.03.17.19.14.42;	author j;	state Exp;
branches;
next	1.154;

1.154
date	2013.03.17.19.14.34;	author j;	state Exp;
branches;
next	1.153;

1.153
date	2013.03.17.19.13.38;	author j;	state Exp;
branches;
next	1.152;

1.152
date	2013.03.17.19.13.10;	author j;	state Exp;
branches;
next	1.151;

1.151
date	2013.03.17.19.13.07;	author j;	state Exp;
branches;
next	1.150;

1.150
date	2013.03.17.19.12.47;	author j;	state Exp;
branches;
next	1.149;

1.149
date	2013.03.17.19.12.13;	author j;	state Exp;
branches;
next	1.148;

1.148
date	2013.03.17.19.11.47;	author j;	state Exp;
branches;
next	1.147;

1.147
date	2013.03.17.19.10.49;	author j;	state Exp;
branches;
next	1.146;

1.146
date	2013.03.17.19.10.28;	author j;	state Exp;
branches;
next	1.145;

1.145
date	2013.03.17.19.10.20;	author j;	state Exp;
branches;
next	1.144;

1.144
date	2013.03.17.19.09.54;	author j;	state Exp;
branches;
next	1.143;

1.143
date	2013.03.17.19.08.26;	author j;	state Exp;
branches;
next	1.142;

1.142
date	2013.03.17.19.08.14;	author j;	state Exp;
branches;
next	1.141;

1.141
date	2013.03.17.19.05.31;	author j;	state Exp;
branches;
next	1.140;

1.140
date	2013.03.17.19.04.11;	author j;	state Exp;
branches;
next	1.139;

1.139
date	2013.03.17.19.04.04;	author j;	state Exp;
branches;
next	1.138;

1.138
date	2013.03.17.19.01.53;	author j;	state Exp;
branches;
next	1.137;

1.137
date	2013.03.17.19.01.39;	author j;	state Exp;
branches;
next	1.136;

1.136
date	2013.03.17.19.01.23;	author j;	state Exp;
branches;
next	1.135;

1.135
date	2013.03.17.18.57.27;	author j;	state Exp;
branches;
next	1.134;

1.134
date	2013.03.17.18.56.47;	author j;	state Exp;
branches;
next	1.133;

1.133
date	2013.03.17.18.56.40;	author j;	state Exp;
branches;
next	1.132;

1.132
date	2013.03.17.18.55.42;	author j;	state Exp;
branches;
next	1.131;

1.131
date	2013.03.17.18.55.33;	author j;	state Exp;
branches;
next	1.130;

1.130
date	2013.03.17.18.54.48;	author j;	state Exp;
branches;
next	1.129;

1.129
date	2013.03.17.18.54.37;	author j;	state Exp;
branches;
next	1.128;

1.128
date	2013.03.17.18.53.20;	author j;	state Exp;
branches;
next	1.127;

1.127
date	2013.03.17.18.52.55;	author j;	state Exp;
branches;
next	1.126;

1.126
date	2013.03.17.18.52.35;	author j;	state Exp;
branches;
next	1.125;

1.125
date	2013.03.17.18.52.07;	author j;	state Exp;
branches;
next	1.124;

1.124
date	2013.03.17.18.51.51;	author j;	state Exp;
branches;
next	1.123;

1.123
date	2013.03.17.18.51.01;	author j;	state Exp;
branches;
next	1.122;

1.122
date	2013.03.17.18.49.56;	author j;	state Exp;
branches;
next	1.121;

1.121
date	2013.03.17.18.49.34;	author j;	state Exp;
branches;
next	1.120;

1.120
date	2013.03.17.18.49.14;	author j;	state Exp;
branches;
next	1.119;

1.119
date	2013.03.17.18.48.34;	author j;	state Exp;
branches;
next	1.118;

1.118
date	2013.03.17.18.37.56;	author j;	state Exp;
branches;
next	1.117;

1.117
date	2013.03.17.18.37.00;	author j;	state Exp;
branches;
next	1.116;

1.116
date	2013.03.17.18.36.13;	author j;	state Exp;
branches;
next	1.115;

1.115
date	2013.03.17.18.35.19;	author j;	state Exp;
branches;
next	1.114;

1.114
date	2013.03.17.18.35.12;	author j;	state Exp;
branches;
next	1.113;

1.113
date	2013.03.17.18.34.35;	author j;	state Exp;
branches;
next	1.112;

1.112
date	2013.03.17.18.33.42;	author j;	state Exp;
branches;
next	1.111;

1.111
date	2013.03.17.18.33.35;	author j;	state Exp;
branches;
next	1.110;

1.110
date	2013.03.17.18.33.17;	author j;	state Exp;
branches;
next	1.109;

1.109
date	2013.03.17.18.32.44;	author j;	state Exp;
branches;
next	1.108;

1.108
date	2013.03.17.18.32.06;	author j;	state Exp;
branches;
next	1.107;

1.107
date	2013.03.17.18.31.37;	author j;	state Exp;
branches;
next	1.106;

1.106
date	2013.03.17.18.31.14;	author j;	state Exp;
branches;
next	1.105;

1.105
date	2013.03.17.18.28.32;	author j;	state Exp;
branches;
next	1.104;

1.104
date	2013.03.17.18.27.26;	author j;	state Exp;
branches;
next	1.103;

1.103
date	2013.03.17.18.27.05;	author j;	state Exp;
branches;
next	1.102;

1.102
date	2013.03.17.18.22.47;	author j;	state Exp;
branches;
next	1.101;

1.101
date	2013.03.17.18.22.01;	author j;	state Exp;
branches;
next	1.100;

1.100
date	2013.03.17.18.20.59;	author j;	state Exp;
branches;
next	1.99;

1.99
date	2013.03.17.18.20.50;	author j;	state Exp;
branches;
next	1.98;

1.98
date	2013.03.17.18.20.26;	author j;	state Exp;
branches;
next	1.97;

1.97
date	2013.03.17.18.20.20;	author j;	state Exp;
branches;
next	1.96;

1.96
date	2013.03.17.18.19.54;	author j;	state Exp;
branches;
next	1.95;

1.95
date	2013.03.17.18.19.42;	author j;	state Exp;
branches;
next	1.94;

1.94
date	2013.03.17.18.19.26;	author j;	state Exp;
branches;
next	1.93;

1.93
date	2013.03.17.18.18.54;	author j;	state Exp;
branches;
next	1.92;

1.92
date	2013.03.17.18.16.41;	author j;	state Exp;
branches;
next	1.91;

1.91
date	2013.03.17.18.16.29;	author j;	state Exp;
branches;
next	1.90;

1.90
date	2013.03.17.18.15.50;	author j;	state Exp;
branches;
next	1.89;

1.89
date	2013.03.17.18.15.18;	author j;	state Exp;
branches;
next	1.88;

1.88
date	2013.03.17.18.15.14;	author j;	state Exp;
branches;
next	1.87;

1.87
date	2013.03.17.18.14.33;	author j;	state Exp;
branches;
next	1.86;

1.86
date	2013.03.17.18.13.19;	author j;	state Exp;
branches;
next	1.85;

1.85
date	2013.03.17.18.13.08;	author j;	state Exp;
branches;
next	1.84;

1.84
date	2013.03.17.18.12.33;	author j;	state Exp;
branches;
next	1.83;

1.83
date	2013.03.17.18.09.47;	author j;	state Exp;
branches;
next	1.82;

1.82
date	2013.03.17.18.07.18;	author j;	state Exp;
branches;
next	1.81;

1.81
date	2013.03.17.18.06.45;	author j;	state Exp;
branches;
next	1.80;

1.80
date	2013.03.17.18.05.32;	author j;	state Exp;
branches;
next	1.79;

1.79
date	2013.03.17.18.05.27;	author j;	state Exp;
branches;
next	1.78;

1.78
date	2013.03.17.18.05.12;	author j;	state Exp;
branches;
next	1.77;

1.77
date	2013.03.17.18.04.42;	author j;	state Exp;
branches;
next	1.76;

1.76
date	2013.03.17.18.04.07;	author j;	state Exp;
branches;
next	1.75;

1.75
date	2013.03.17.18.00.54;	author j;	state Exp;
branches;
next	1.74;

1.74
date	2013.03.17.18.00.05;	author j;	state Exp;
branches;
next	1.73;

1.73
date	2013.03.17.17.59.26;	author j;	state Exp;
branches;
next	1.72;

1.72
date	2013.03.17.17.59.14;	author j;	state Exp;
branches;
next	1.71;

1.71
date	2013.03.17.17.58.12;	author j;	state Exp;
branches;
next	1.70;

1.70
date	2013.03.17.17.57.23;	author j;	state Exp;
branches;
next	1.69;

1.69
date	2013.03.17.17.57.15;	author j;	state Exp;
branches;
next	1.68;

1.68
date	2013.03.17.17.57.04;	author j;	state Exp;
branches;
next	1.67;

1.67
date	2013.03.17.17.50.16;	author j;	state Exp;
branches;
next	1.66;

1.66
date	2013.03.17.17.48.58;	author j;	state Exp;
branches;
next	1.65;

1.65
date	2013.03.17.17.47.08;	author j;	state Exp;
branches;
next	1.64;

1.64
date	2013.03.17.17.41.36;	author j;	state Exp;
branches;
next	1.63;

1.63
date	2013.03.17.17.41.25;	author j;	state Exp;
branches;
next	1.62;

1.62
date	2013.03.17.17.41.14;	author j;	state Exp;
branches;
next	1.61;

1.61
date	2013.03.17.17.40.45;	author j;	state Exp;
branches;
next	1.60;

1.60
date	2013.03.17.17.40.09;	author j;	state Exp;
branches;
next	1.59;

1.59
date	2013.03.17.17.38.33;	author j;	state Exp;
branches;
next	1.58;

1.58
date	2013.03.17.06.01.35;	author j;	state Exp;
branches;
next	1.57;

1.57
date	2013.03.17.05.51.45;	author j;	state Exp;
branches;
next	1.56;

1.56
date	2013.03.17.05.47.54;	author j;	state Exp;
branches;
next	1.55;

1.55
date	2013.03.17.05.47.14;	author j;	state Exp;
branches;
next	1.54;

1.54
date	2013.03.17.05.46.44;	author j;	state Exp;
branches;
next	1.53;

1.53
date	2013.03.17.05.46.29;	author j;	state Exp;
branches;
next	1.52;

1.52
date	2013.03.17.05.46.18;	author j;	state Exp;
branches;
next	1.51;

1.51
date	2013.03.17.05.46.02;	author j;	state Exp;
branches;
next	1.50;

1.50
date	2013.03.17.05.45.07;	author j;	state Exp;
branches;
next	1.49;

1.49
date	2013.03.17.05.44.57;	author j;	state Exp;
branches;
next	1.48;

1.48
date	2013.03.17.05.44.46;	author j;	state Exp;
branches;
next	1.47;

1.47
date	2013.03.17.05.44.15;	author j;	state Exp;
branches;
next	1.46;

1.46
date	2013.03.17.05.31.38;	author j;	state Exp;
branches;
next	1.45;

1.45
date	2013.03.17.05.31.01;	author j;	state Exp;
branches;
next	1.44;

1.44
date	2013.03.17.05.30.20;	author j;	state Exp;
branches;
next	1.43;

1.43
date	2013.03.17.02.38.42;	author j;	state Exp;
branches;
next	1.42;

1.42
date	2013.03.17.02.37.10;	author j;	state Exp;
branches;
next	1.41;

1.41
date	2013.03.17.02.36.54;	author j;	state Exp;
branches;
next	1.40;

1.40
date	2013.03.17.02.35.58;	author j;	state Exp;
branches;
next	1.39;

1.39
date	2013.03.17.02.34.24;	author j;	state Exp;
branches;
next	1.38;

1.38
date	2013.03.17.02.34.08;	author j;	state Exp;
branches;
next	1.37;

1.37
date	2013.03.17.02.33.56;	author j;	state Exp;
branches;
next	1.36;

1.36
date	2013.03.17.02.33.37;	author j;	state Exp;
branches;
next	1.35;

1.35
date	2013.03.17.02.33.05;	author j;	state Exp;
branches;
next	1.34;

1.34
date	2013.03.17.02.33.00;	author j;	state Exp;
branches;
next	1.33;

1.33
date	2013.03.17.02.31.35;	author j;	state Exp;
branches;
next	1.32;

1.32
date	2013.03.17.02.31.14;	author j;	state Exp;
branches;
next	1.31;

1.31
date	2013.03.17.02.30.39;	author j;	state Exp;
branches;
next	1.30;

1.30
date	2013.03.17.02.28.53;	author j;	state Exp;
branches;
next	1.29;

1.29
date	2013.03.17.02.28.31;	author j;	state Exp;
branches;
next	1.28;

1.28
date	2013.03.17.02.28.10;	author j;	state Exp;
branches;
next	1.27;

1.27
date	2013.03.17.02.26.54;	author j;	state Exp;
branches;
next	1.26;

1.26
date	2013.03.17.02.26.00;	author j;	state Exp;
branches;
next	1.25;

1.25
date	2013.03.17.02.25.14;	author j;	state Exp;
branches;
next	1.24;

1.24
date	2013.03.17.02.24.05;	author j;	state Exp;
branches;
next	1.23;

1.23
date	2013.03.17.02.23.08;	author j;	state Exp;
branches;
next	1.22;

1.22
date	2013.03.17.02.22.34;	author j;	state Exp;
branches;
next	1.21;

1.21
date	2013.03.17.02.22.04;	author j;	state Exp;
branches;
next	1.20;

1.20
date	2013.03.17.02.21.50;	author j;	state Exp;
branches;
next	1.19;

1.19
date	2013.03.17.02.21.01;	author j;	state Exp;
branches;
next	1.18;

1.18
date	2013.03.17.02.20.02;	author j;	state Exp;
branches;
next	1.17;

1.17
date	2013.03.17.02.19.52;	author j;	state Exp;
branches;
next	1.16;

1.16
date	2013.03.17.02.19.36;	author j;	state Exp;
branches;
next	1.15;

1.15
date	2013.03.17.02.19.08;	author j;	state Exp;
branches;
next	1.14;

1.14
date	2013.03.17.02.18.59;	author j;	state Exp;
branches;
next	1.13;

1.13
date	2013.03.17.02.18.46;	author j;	state Exp;
branches;
next	1.12;

1.12
date	2013.03.17.02.17.57;	author j;	state Exp;
branches;
next	1.11;

1.11
date	2013.03.17.02.17.37;	author j;	state Exp;
branches;
next	1.10;

1.10
date	2013.03.17.02.16.44;	author j;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.17.02.14.27;	author j;	state Exp;
branches;
next	1.8;

1.8
date	2013.03.17.02.13.34;	author j;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.17.01.39.14;	author j;	state Exp;
branches;
next	1.6;

1.6
date	2013.03.17.01.38.18;	author j;	state Exp;
branches;
next	1.5;

1.5
date	2013.03.17.01.37.59;	author j;	state Exp;
branches;
next	1.4;

1.4
date	2013.03.17.01.37.51;	author j;	state Exp;
branches;
next	1.3;

1.3
date	2013.03.17.01.37.18;	author j;	state Exp;
branches;
next	1.2;

1.2
date	2013.03.17.01.36.55;	author j;	state Exp;
branches;
next	1.1;

1.1
date	2013.03.16.05.43.40;	author j;	state Exp;
branches;
next	;


desc
@vim
@


1.494
log
@vim
@
text
@#Sifteo Blickets
This repository provides instructions, materials, and code for using Sifteo Cubes to implement a "blicket"-type psychology experiment.
Follow that?  If not, read on to learn what Sifteo Cubes are and what a "blicket" is! See also our recent [blog post]() about this.

#Quick start instructions
Sifteo provides a _free simulator_, so you can follow this tutorial without purchasing any Sifteo cubes.

Install the SDK from Sifteo ([SDK download](https://developers.sifteo.com/docs/SifteoSDK/0.9.8/getting_started.html))

Clone this repo

```bash
git clone https://github.com/jbmartin/SifteoBlickets.git 
```

Start "siftulator" (simulator)

* Windows: double click sifteo-sdk-shell.cmd
* Mac OS X: double click sifteo-sdk-shell.command
* Linux: run sifteo-sdk-shell.sh

Inside the SDK, navigate to this tutorial, build and run it

```bash
cd SifteoBlickets
make
siftulator -n 5 SifteoBlickets.elf
```

Congratulations! You just launched your very own blicket experiment.


#What are blickets?

The word 'blicket' is a neologism (or made up word) created by psychologists. 
However, to a psychologist or philosopher interested in how people reason and learn about causality, a blicket has the following meaning:

**blicket** (n. *plural* blickets)

1. (philosophy) An object with certain properties causing it to trigger a "blicket detector" (a device that lights up and plays music), introduced in certain experiments relating to causality and perception ([wikitonary](http://en.wiktionary.org/wiki/blicket)).

In other words a 'blicket' is basically something that can _cause_ something else (specifically, the 'blicket detector') to do something.
Just like an Aspirin might cause your headache go away, a "blicket" might make a "blicket detector" go wild (blink and play sounds).
Why call it a blicket?  Meaningless nonesense words are an important tool for studying learning and reasoning because they help to reduce or remove the influence prior knowledge.
You could rename a blicket anything ("wuz", "kez", etc...) but many experiments in causal learning have been done (arbitrarily) with the phrase 'blicket.'

Psychologists have relied on the blicket detector game as a model of how people learn new causal relationships.
How does the blicket game work?  Typically in an experiment, the researcher tells the participant that there is a box that is a "blicket detector" that will play sounds and light up when a "blicket" is placed on top if it.
In other words, the blicket will _cause_ the blicket detector to activate when the two come into physical contact.
Various objects (square blocks) are placed on the blicket detector one a time, and only certain ones cause the detector to activate.
Thus, the physical collision between the blicket and the detector causes a change of state in the detector.
The goal is to see how children and adults learn which objects _cause_ the blicket detector to activate.
This simple game lets you explore include how children and adults generalize from certain objects to other, novel ones.
For example, do people generalize based on perceptual properties, causal properties, or a mixture of these properties?

#What are Sifteo Cubes?
Sifteo offers a unique gaming platform centered around interactive 1.5 inch cubes each with their own LCD touch screen, motion sensor, accelerometer, and the ability to sense nearby cubes.
Basically, they're like programmable iPod nanos that can touch and talk to one another!
These feature packed physical computing devices present an exciting opportunity for psychologists to study how people reason and learn through physical interaction between real objects.

![][sifteo_cubes]

[sifteo_cubes]: http://www.ufunk.net/wp-content/uploads/2011/08/Sifteo-Cubes.jpg

If you'd like to learn more about Sifteo and "intelligent play," watch this TED talk by former MIT Media Lab grad student, [David Merrill](http://alumni.media.mit.edu/~dmerrill/).

<iframe src="http://embed.ted.com/talks/david_merrill_demos_siftables_the_smart_blocks.html" width="560" height="315" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


#What are Sifteo Blickets?

This project, Sifteo Blickets, is a mash up of these two ideas.
In particular, we developed a simple bit of code that enables Sifteo Cubes to be used in blicket-type experiments.
One of the cubes acts as the detector and the rest are objects that may or may not work as blickets.
The blicket detector cube will activate when the right type of other cube comes in contact with the detector cube.
This project can serve as an example for others interested in using Sifteo cubes in psychological research, or in running new blicket-type experiments!


![][blicket_guts]
![][blicket_detector]

[blicket_guts]: http://depts.washington.edu/idl/images/blicket_internal_bottom.jpg
[blicket_detector]: http://depts.washington.edu/idl/images/Blicket_top.jpg

Why Sifteo Blickets?
Our system offers a number of advantages over traditional blicket-style paradigms.
First, in the traditional set-up, the experimenter has to find all the parts and build a blicket detector using hot glue gun and a soldering iron (see above photos, [for instructions on building the box see these notes](http://depts.washington.edu/idl/light_detail.htm)).
This process can be challenging, error-prone, and messy, especially if there's not an electronics expert in the lab.
Second, relying on an experimenter to appropriately and accurately toggle the blicket detector when the blicket is placed on top introduces experimental design problems.
For example, a subtle temporal delay or advance between placing the block on the divide and flipping the switch to activate the blicket might influence the learning of the causal relationship (e.g., Lagnado & Sloman, 2004).
Additionally, the confederate's anticipation of which block to test next might signal to the participant that there's something special about them aside from their ability to activate the detector.
This issue is sometimes known as [experimenter expectancy](http://en.wikipedia.org/wiki/Observer-expectancy_effect) effects and are often addressed by designs where the experimenter and participant are "blind" to which condition they have been assigned.
Finally, a hardwired blicket detector is a fixed, unchangeable device.
As a result, it is difficult to create more complicated experiments involving other types of causal patterns, interventions, or variable types.

Sifteo Cubes overcome each of the aforementioned limitations.
Each Sifteo Cube has calibrated object detecting sensors, removing any possibility of the experimenter messing up the timing when on block physically hits another one.
Sifteo provides an API (Application Programming Interface) that allows the experimenter to program the logic of the experiment and upload it to the cubes beforehand so that both the participant and the confederate are blind to the condition, avoiding any unintentional signaling.
In addition, the software can be loaded onto the cubes and carried (along with a small battery powered base station) to a testing site without needing a computer nearby.
The base station can be used to store data files for later analysis (connects using standard USB).
Most importantly, Sifteo provides endless possibilities for creating (and recreating) interesting psychological experiments beyond the blickets design.
They are particularly well suited for work with young children where using a computer mouse can be a challenge.

To begin exploring the utility of the Cubes, we implemented a version of the classic causal learning experiment by Gopnik & Sobel (2000) (i.e., the blicket experiment).

#The Experiment

The 'blickets' game was first used in a study conducted by Gopnik & Sobel (2000).
G&S looked at how the causal properties of objects (e.g., making a blicket detector flash and play music) shape young children's conceptual knowledge.
Previously, most developmental research focused on how perceptual features (color, shape, etc.) influence categorization.
This was motivated by many prominent psychologist, including Piaget, who argued that young children were unable to understand, and therefore, categorize objects based on causal properties.
To test this theory, G&S pitted perceptual features against causal ones in a simple, yet elegant, category learning paradigm.

##Materials

Gopnik and Sobel constructed seven sets of four objects out of wooden blocks.
Below is our attempt to recreate those objects using Adobe Illustrator.
These materials are freely available in the [asset folder](https://github.com/jbmartin/SifteoBlickets/tree/master/assets) of this git repository.

####Set 1: Four Identical Objects:
![][green_rect]  ![][green_rect]  ![][green_rect] ![][green_rect]

####Set 2: Same Color Different Shape:
![][green_rect]  ![][green_sq]  ![][green_rounded_rect] ![][green_oval]

####Set 3: Same Shape Different Color:
![][red_rect]  ![][green_rect]  ![][yellow_rect] ![][blue_rect]

####Set 4: Different Colors Different Shapes:
![][green_sq]  ![][blue_oval]  ![][red_tri] ![][yellow_rounded_rect]

####Set 5: Same Shape Conflicts Color:
![][green_rounded_rect]  ![][green_rounded_rect]  ![][red_rounded_rect] ![][red_rounded_rect]

####Set 6: Same Color Conflicts Shape:
![][green_rounded_rect]  ![][green_rounded_rect]  ![][green_sq] ![][green_sq]

####Set 7: Conflicts Shape and Color:
![][red_rect]  ![][red_rect]  ![][green_sq] ![][green_sq]

[green_rect]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/green_rect.png?raw=true
[red_rect]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/red_rect.png?raw=true
[yellow_rect]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/yellow_rect.png?raw=true
[green_oval]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/green_oval.png?raw=true
[green_sq]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/green_sq.png?raw=true
[green_rounded_rect]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/green_rounded_rect.png?raw=true
[blue_oval]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/blue_oval.png?raw=true
[blue_rect]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/blue_rect.png?raw=true
[red_tri]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/red_tri.png?raw=true
[yellow_rounded_rect]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/yellow_rounded_rect.png?raw=true
[red_rounded_rect]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/red_rounded_rect.png?raw=true

##Procedure

An experimenter presented seven sets of the four objects (shown above) to children.
Set 1 was always presented first, followed by sets 2 through 7 at random.
In sets 1 through 4, two objects were randomly assigned to be "blickets" in the sense that they would activate the "blicket detector."
In sets 5 and 6, two perceptually conflicting blickets were chosen to be blickets.
In set 5, for example, one blicket might be the green rounded rectangle and the other blicket might be a red rounded rectangle.
Each child was placed either in a "induction" or "categorization" condition.
In the categorization condition, the experimenter placed each of the 4 objects on the blicket detector separately and then returned them to their original spots.
The experimenter then lifted up one of the blickets and asked the child which of the other blocks was also a blicket.
In the induction condition, the experimenter described two objects as being blickets and two as not being blickets. She then placed the blicket on the detector and asked the child which of the remaining blocks would also set off the detector.

JAY:  I THINK A PARAGRAPH HERE ABOUT WHAT THE STUDY FOUND, HOW IT DECONFOUNDS FEATURE/CAUSAL LEARNING WOULD MAKE SENSE.

![][screen_shot]

[screen_shot]: https://github.com/jbmartin/SifteoBlickets/blob/master/blog_assets/screen_shot.png?raw=true


#Under the hood: C++ basics
Okay, so that was pretty cool, but you probabily want to be able to design your _own_ blicket experiment.
Sifteo uses a popular programming language called C++.
C++ isn't a great language to learn if you're just starting out, mainly because it's very unforgiving of mistakes and requires quite a bit of knowledge to do things that are trivial in scripting languages (Python, Javascript, etc.).
It shines in large scale production software suits like operating systems or video games where speed and memory are critical (e.g., tiny game cubes with limited memory and large cpu demands).
Fortunately, the Sifteo API wraps up most of the scary parts of dealing with C++ directly.
However, it still rears its ugly head from time to time.
We'll do our best to help you figure out how to deal with it or where to turn go when you're stuck.

Let's start with some C++ basics.
C++ is [_strongly typed_](http://en.wikipedia.org/wiki/Strong_typing) and [_compiled_](http://en.wikipedia.org/wiki/Interpreted_language) (i.e., not interactive).
Strong typing requires that all variables have a type (integer, string, blicket, etc) explicitly assigned to them when they are created.
Typing is important because it defines the appropriate behavior of a variable (e.g., integers add, ducks quack, and blickets set off blicket detectors, right?).
If an integer tries to quack, we want an error to prevent our program from exploding.
Suppose, for example, you want a variable to store the number of cubes (5) we want to use in our experiment.
The integer (int) data type seems appropriate, so lets give our variable a type and set it to 5.

```cpp
// Number of cubes
int n_cubes;
n_cubes = 5;
```

Notice that each expression ends in a semicolon (;) and comments (pieces of code ignored by the compiler used for annotation) are prepended with two forward slashes (//).
Setting n\_cubes equal to 'quack' throws an error because 'quack' is a string, not an integer.
Int is just one of the dozens of built in data types found in C++, many more can be found [here](http://www.cplusplus.com/doc/tutorial/variables/).
At some point, you'll want to create your own types that can have their own behaviors.
We won't go into too much depth here, but this can be done using _typedef_.
Say you want a type that defines blicket states that can either be true (on) or false (off).

```cpp
// Type for blicket state
typedef bool is_blicket_on;

// Turn blicket on
is_blicket_on blicket_state = true;
```

Note, the last line of code combines type declaration and variable assignment.
More on custom data types [here](http://www.cplusplus.com/doc/tutorial/other_data_types/).

Another key aspect of C++ is that it's "compiled."
Compiling turns human readable code into 1s and 0s that the computer can understand.
All languages are eventually compiled, but some (i.e., scripting languages) compile your code as you input, allowing you to interact with its output.
C++ requires that your code be correct (no bugs) and complete before you can use it.
The trade off between compiled and interpreted (interactive) programming languages is speed versus production.
Compiled languages generally have faster performance rates but slower code development times.

Luckily, the Sifteo API handles all of the compiling issues using a command called make.
To illustrate, once you have code ready to compile, you run

```bash
cd MyExperiment
make my_experiment
```

More on this later.

#Loading your materials

#The heart of your experiment: Main.cpp
First, lets look at the logic of main.cpp.



Todo(Jay):
Discuss
- [ ] neighborhoods
- [ ] touch events
- [ ] callbacks
- [ ] sprites
- [ ] audio


#Advanced
## Interventions (touch screen + neighborhoods)
## Continuous causal power (tilt)

##Additional resources
* [Getting Oriented with the Sifteo SDK](http://tech.sifteo.com/2013/01/08/getting-oriented-with-the-sifteo-sdk/)
* [Getting Started: Basic Animation](http://tech.sifteo.com/2013/01/22/getting-started-basic-animation/)
* [Neighborhoods and Locality](http://tech.sifteo.com/2013/01/03/neighborhoods-and-locality/)
* [C++ basics](http://www.cprogramming.com/tutorial.html)
@


1.493
log
@vim
@
text
@d220 1
a220 1
The Sifteo API handles compiling using a command called make.
@


1.492
log
@vim
@
text
@d217 1
a217 1
The main trade off between compiled and interpreted (interactive) programming languages is speed versus production.
@


1.491
log
@vim
@
text
@d215 1
a215 1
All languages are eventually compiled, but some (i.e., scripting languages) compile your code as you're inputting it and allow you to interact with the output.
@


1.490
log
@vim
@
text
@d233 1
a233 1
First, lets look at the basic logic of main.cpp.
@


1.489
log
@vim
@
text
@d230 2
@


1.488
log
@vim
@
text
@d230 1
a230 1
#The program's heart: Main.cpp
@


1.487
log
@vim
@
text
@d230 1
a230 1
#The programs heart: Main.cpp
@


1.486
log
@vim
@
text
@d230 1
a230 1
#Main.cpp
@


1.485
log
@vim
@
text
@d228 1
@


1.484
log
@vim
@
text
@d217 1
a217 1
The main trade off between compiled and interpreted (interactive) programming languages is speed versus productivity.
@


1.483
log
@vim
@
text
@d210 1
a210 1
Note, the first line of code combines type declaration and variable assignment.
@


1.482
log
@vim
@
text
@d210 1
@


1.481
log
@vim
@
text
@d205 1
@


1.480
log
@vim
@
text
@d205 1
@


1.479
log
@vim
@
text
@d218 1
a218 1
Some of the details will be described later, but to illustrate, once you have code ready you can run
@


1.478
log
@vim
@
text
@d218 1
a218 1
Some of the details will be described later, but once you finish the code for your experiment you run
@


1.477
log
@vim
@
text
@d215 1
a215 1
Compiled languages generally have faster performance rates but take slower code development times.
@


1.476
log
@vim
@
text
@d217 2
a218 2
The Sifteo API handles all of the compiling using a command called make.
The details will be described later, but once you finish the code for your experiment you'll compiling it using make for example
@


1.475
log
@vim
@
text
@d217 9
@


1.474
log
@vim
@
text
@d214 1
a214 1
The trade off between compiled and interpreted (interactive) programming languages is speed versus productivity.
@


1.473
log
@vim
@
text
@d214 2
a215 2

Strong typing
@


1.472
log
@vim
@
text
@d211 1
a213 1
Compiling turns human readable code into 1s and 0s that the computer can understand.
@


1.471
log
@vim
@
text
@d212 1
a212 1
C++ requires that you finish all of your code
@


1.470
log
@vim
@
text
@d210 3
a212 2
Another key aspect of C++ is that it's a "compiled language."
All languages are eventually compiled
@


1.469
log
@vim
@
text
@d210 1
a210 1
Another major aspect of C++ is that it's a "compiled language."
@


1.468
log
@vim
@
text
@d210 2
@


1.467
log
@vim
@
text
@d199 1
a199 1
We won't go into too much depth here, but this can be done with _typedef_.
@


1.466
log
@vim
@
text
@d204 2
a205 2
typedef bool isBlicketOn;
isBlicketOn blicket_state = true;
@


1.465
log
@vim
@
text
@d205 1
a205 1
isOn blicket_state = true;
@


1.464
log
@vim
@
text
@d204 1
a204 1
typedef bool isOn;
@


1.463
log
@vim
@
text
@d204 2
a205 1
typedef bool blicket_state;
@


1.462
log
@vim
@
text
@d207 1
a207 1
More on data types [here](http://www.cplusplus.com/doc/tutorial/other_data_types/).
@


1.461
log
@vim
@
text
@d203 1
a203 1
// 
@


1.460
log
@vim
@
text
@d200 1
a200 1
Suppose you want a type that defines blicket states that can either be true (on) or false (off).
@


1.459
log
@vim
@
text
@d199 1
a199 1
We won't go into too much depth here, but this can be done with typedef.
@


1.458
log
@vim
@
text
@d203 1
d207 2
@


1.457
log
@vim
@
text
@d198 7
@


1.456
log
@vim
@
text
@d197 1
a197 1
Int is just one of the dozens of built in data types found in C++, more can be found [here](http://www.cplusplus.com/doc/tutorial/variables/).
@


1.455
log
@vim
@
text
@d184 1
a184 1
Typing is important because it defines the appropriate behavior of a variable (e.g., integers added, ducks quack, and blickets set off blicket detectors, right?).
@


1.454
log
@vim
@
text
@d184 1
a184 1
Typing is important because it defines the appropriate behavior for a variable (e.g., integers added, ducks quack, and blickets set off blicket detectors, right?).
@


1.453
log
@vim
@
text
@d203 1
a203 1
##Main.cpp
@


1.452
log
@vim
@
text
@d196 1
a196 1
Setting n\_cubes equal to 'quack' throws an error because 'quack' is a string not an integer.
d203 1
@


1.451
log
@vim
@
text
@d185 1
a185 1
If an integer tries to quack, we want an error to prevent our program for exploding.
@


1.450
log
@vim
@
text
@d196 1
a196 1
As expected, setting n\_cubes equal to 'quick' throws an error.
@


1.449
log
@vim
@
text
@d196 1
a196 1
Setting n\_cubes equal to 'quick' throws an error.
@


1.448
log
@vim
@
text
@d196 1
@


1.447
log
@vim
@
text
@d185 1
a185 1
If an integer tries to quack, we want an error to occur preventing our program for exploding.
@


1.446
log
@vim
@
text
@d185 1
a185 1
If an integer tries to quack, we want an error to occur.
@


1.445
log
@vim
@
text
@d184 1
a184 1
Typing is important because it defines the appropriate behavior for a variable (e.g., integers can be added, ducks quack, and blickets set off blicket detectors, right?).
@


1.444
log
@vim
@
text
@d185 1
@


1.443
log
@vim
@
text
@d195 1
@


1.442
log
@vim
@
text
@d173 1
a173 1
Okay, so that was pretty cool, but you probabily want to be able to design your _own_  blicket experiment.
d184 1
a184 1
Typing is important because it defines the appropriate behavior of a variable (e.g., integers can be added, blickets can set off blicket detectors).
@


1.441
log
@vim
@
text
@d175 1
a175 1
C++ isn't a great language to learn if you're just starting out, mainly because it's very unforgiving of mistakes and requires quite a bit of knowledge to things that are trivial in scripting languages (Python, Javascript, etc.).
@


1.440
log
@vim
@
text
@d175 1
a175 2
C++ isn't a great language to learn if you're just starting out.
It's very unforgiving of mistakes and requires quite a bit of knowledge to things that are trivial in scripting languages (Python, Javascript, etc.).
@


1.439
log
@vim
@
text
@d175 1
a175 1
I'm not going lie, C++ isn't a great language to learn if you're just starting out.
@


1.438
log
@vim
@
text
@d172 1
a172 1
#Under the hood: Into the darkness known as C++
@


1.437
log
@vim
@
text
@d186 1
a186 1
Suppose, for example, you want a variable to store the number of cubes we want to use in our experiment.
@


1.436
log
@vim
@
text
@d195 1
a195 1
Notice that each expression ends in a semicolon (;) and comments (lines of code ignored by the compiler used for annotation) are prepended with two forward slashes (//).
@


1.435
log
@vim
@
text
@d195 1
a195 1
Notice that each expression ends in a semicolon (;) and comments (lines of code ignored by the compiler) are prepended with two forward slashes (//).
@


1.434
log
@vim
@
text
@d195 1
a195 1
Notice that each expression ends in a semicolon (;) and comments (lines of code ignored by the compiler) are marked with two forward slashes (//).
@


1.433
log
@vim
@
text
@d195 1
a195 1
Notice that each expression ends in a semicolon.
@


1.432
log
@vim
@
text
@d195 2
@


1.431
log
@vim
@
text
@d186 1
a186 1
Suppose, for example, you want a variable to store the number of blickets used in your experiment.
d190 1
a190 1
// Number of blickets
@


1.430
log
@vim
@
text
@d191 1
a191 1
int n_blickets;
@


1.429
log
@vim
@
text
@d192 1
a192 1
n_blickets = 5;
@


1.428
log
@vim
@
text
@d187 1
a187 1
The integer (int) data type suits our needs
d192 1
@


1.427
log
@vim
@
text
@d187 1
a187 1
The integer (int) data type seems appropriate for our needs, so lets use it
@


1.426
log
@vim
@
text
@d185 3
a187 3
Typing defines the appropriate behavior of a variable (e.g., integers can be added, blickets can set off blicket detectors, etc).
For example, suppose you want a variable to store the number of blickets used in your experiment.
The integer data type seems appropriate for our needs, so lets use it 
@


1.425
log
@vim
@
text
@d185 1
a185 1
Typing defines the appropriate behavior of a variable (e.g., integers can be added, blickets can set off a blicket detector, etc).
d187 1
a187 1
The integer data type seems appropriate for our needs, and we set it with the following code
@


1.424
log
@vim
@
text
@d186 2
a187 1
For example, suppose you want a variable that stores the number of blickets used in your experiment.
@


1.423
log
@vim
@
text
@d184 1
a184 1
Strong typing requires that all variables have a type or class (integer, string, blicket, etc) explicitly assigned to them when they are created.
d186 1
a186 1
For example, suppose you want a variable to store the number of blickets in your experiment.
d189 1
@


1.422
log
@vim
@
text
@d185 1
a186 1
one declares a variable, it needs to integer, string, blicket, etc.
d189 1
a189 1
int 
@


1.421
log
@vim
@
text
@d183 3
a185 3
C++ is [_strongly typed_](http://en.wikipedia.org/wiki/Strong_typing) and [compiled](http://en.wikipedia.org/wiki/Interpreted_language) (i.e., not interactive).
Strong typing requires that all variables to have a type or class (integer, string, blicket, etc) explicitly assigned to them at the time they are created.
For example, suppose you want to create a variable for the number of blickets in a game.
@


1.420
log
@vim
@
text
@d183 1
a183 1
C++ is [_strongly typed_](http://en.wikipedia.org/wiki/Strong_typing) and [compiled](http://en.wikipedia.org/wiki/Interpreted_language) (i.e., not interactive) programming language.
@


1.419
log
@vim
@
text
@d177 1
a177 1
It's mainly shines in large scale production software suits like operating systems or video games where speed and memory are critical (e.g., tiny game cubes with limited memory and large cpu demands).
@


1.418
log
@vim
@
text
@d183 1
a183 1
C++ is [_strongly typed_](http://en.wikipedia.org/wiki/Strong_typing) and [compiled](http://en.wikipedia.org/wiki/Interpreted_language) (i.e., not interactive).
@


1.417
log
@vim
@
text
@d183 1
a183 1
C++ is _strongly typed_ and _not interactive_.
@


1.416
log
@vim
@
text
@d182 2
a183 2
Let's start by talking about some basic C++ ideas.
Unlike scripting languages, C++ is _strongly typed_ and _not interactive_.
@


1.415
log
@vim
@
text
@d182 14
d198 2
@


1.414
log
@vim
@
text
@d72 5
a76 1
This project, Sifteo Blickets, is a mash up of these two ideas.  In particular, we developed a simple bit of code that enables Sifteo Cubes to be used in blicket-type experiments.  One of the cubes acts as the detector and the rest are objects that may or may not work as blickets.  The blicket detector cube will activate when the right type of other cube comes in contact with the detector cube. This project can serve as an example for others interested in using Sifteo cubes in psychological research, or in running new blicket-type experiments!
d85 3
a87 1
Why Sifteo Blickets?  Our system offers a number of advantages over traditional blicket-style paradigms.  First, in the traditional set-up, the experimenter has to find all the parts and build a blicket detector using hot glue gun and a soldering iron (see above photos, [for instructions on building the box see these notes](http://depts.washington.edu/idl/light_detail.htm)).
d90 13
a102 7
For example, a subtle temporal delay or advance between placing the block on the divide and flipping the switch to activate
the blicket might influence the learning of the causal relationship (e.g., Lagnado & Sloman, 2004).
Additionally, the confederate's anticipation of which block to test next might signal to the participant that there's something special about them aside from their ability to activate the detector.  This issue is sometimes known as [experimenter expectancy](http://en.wikipedia.org/wiki/Observer-expectancy_effect) effects and are often addressed by designs where the experimenter and participant are "blind" to which condition they have been assigned.   Finally, a hardwired blicket detector is a fixed, unchangeable device.  As a result, it is difficult to create more complicated experiments involving other types of causal patterns, interventions, or variable types.

Sifteo Cubes overcome each of the aforementioned limitations.  Each Sifteo Cube has calibrated object detecting sensors, removing any possibility of the experimenter messing up the timing when on block physically hits another one.
Sifteo provides an API (Application Programming Interface) that allows the experimenter to program the logic of the experiment and upload it to the cubes beforehand so that both the participant and the confederate are blind to the condition, avoiding any unintentional signaling.  In addition, the software can be loaded onto the cubes and carried (along with a small battery powered base station) to
a testing site without needing a computer nearby.  The base station can be used to store data files for later analysis (connects using standard USB).  Most importantly, Sifteo provides endless possibilities for creating (and recreating) interesting psychological experiments beyond the blickets design.  They are particularly well suited for work with young children where using a computer mouse can be a challenge.
d117 2
a118 1
Below is our attempt to recreate those objects using Adobe Illustrator. These materials are freely available in the [asset folder](https://github.com/jbmartin/SifteoBlickets/tree/master/assets) of this git repository.
d157 1
a157 2
In sets 1 through 4, two objects were randomly assigned to be "blickets" in the sense that they would activate
the "blicket detector."
@


1.413
log
@vim
@
text
@d35 2
a36 1
The word 'blicket' is a neologism (or made up word) created by psychologists. However, to a psychologist or philosopher interested in how people reason and learn about causality, a blicket has the following meaning:
d42 4
a45 2
In other words a 'blicket' is basically something that can _cause_ something else (specifically, the 'blicket detector') to do something. Just like an Aspirin might cause your headache go away, a "blicket" might make a 
"blicket detector" go wild (blink and play sounds).  Why call it a blicket?  Meaningless nonesense words are an important tool for studying learning and reasoning because they help to reduce or remove the influence prior knowledge.   You could rename a blicket anything ("wuz", "kez", etc...) but many experiments in causal learning have been done (arbitrarily) with the phrase 'blicket.'
d48 7
a54 5
How does the blicket game work?  Typically in an experiment, the researcher tells the participant that there is a box that is a "blicket
detector" that will play sounds and light up when a "blicket" is placed on top if it.  In other words, the blicket will _cause_ the
blicket detector to activate when the two come into physical contact.  Various objects (square blocks) are placed on the blicket detector one a time, and only certain
ones cause the detector to activate.  Thus, the physical collision between the blicket and the detector causes a change of state
in the detector.  The goal is to see how children and adults learn which objects _cause_ the blicket detector to activate.  This simple game lets you explore include how children and adults generalize from certain objects to other, novel ones.  For example, do people generalize based on perceptual properties, causal properties, or a mixture of these properties?
@


1.412
log
@vim
@
text
@d79 1
a79 1
For example, a subtle temporal delay or advance between placing the block on the devide and flipping the switch to activate
d81 1
a81 1
Additionally, the confederate's anticipation of which block to test next might signal to the participant that there's something special about them aside from their ability to activate the detector.  This issue is sometimes known as [experimenter expectancy](http://en.wikipedia.org/wiki/Observer-expectancy_effect) effects and are often addressed by designs where the experimenter and participant are "blind" to which condition they have been assigned.   Finally, a hardwired blicket detector is a fixed, unchangable device.  As a result, it is difficult to create more complicated experiments involving other types of causal patterns, interventions, or variable types.
d165 1
a165 1
First lets look at the basic logic of main.cpp.
@


1.411
log
@vim
@
text
@d53 1
a53 1
Basically, they are programmable iPod nanos that can touch and talk to one another!
@


1.410
log
@(rcsvers.vim) modified outside of vim.
@
text
@d30 1
a30 1
Congratulations! You just launch your very own blicket experiment.
d41 2
a42 2
In other words a 'blicket' is basically something that can _cause_ something else (specifically, the 'blicket detector') to do something. Just like an Asprin might cause your headache go away, a "blicket" might make a 
"blicket detector" go wild (blink and play sounds).  Why call it a blicket?  Meaningless nonesense words are an important tool for studying learning and reasoning because they help to reduce or remove the influence prior knowledge.   You could rename a blicket anything ("wuz", "kez", etc...) but many experiements in causal learning have been done (arbitrarily) with the phrase 'blicket.'
@


1.409
log
@vim
@
text
@d2 2
a3 1
This repository provides instructions, materials, and code for creating Sifteo "blickets" to accompany our [blog post]().
d5 1
a5 1
#Quick start
d30 1
a30 1
Congratulations! You just ran your own blicket experiment.
d35 1
a35 4
Exactly!
There's no such thing as a blicket; it's neologism created by psychologists to avoid people from having preconceived notions about what it is/isn't or what it can/can't do.
Empty (aka blank) terms are an important tool for studying learning and reasoning because they reduce or remove prior knowledge, allowing researchers to interpret their findings as a (more or less) direct result of their manipulation(s).
Alternatively, if researchers were to ask participants to reason about things they already have strong beliefs about or experience with (e.g., adults and politics or children and toys), it's not clear how much affect a 15 minute experiment would have on getting them to change such beliefs.
d41 10
d52 3
a54 3
Sifteo offers a unique gaming platform centered around interactive 1.5 inch cubes each with their own LCD touch screen, motion sensor, accelerometer, and nearby object sensing abilities.
Basically, they're programmable iPod nanos that can touch and talk to one another!
These feature packed little cubes present an exciting opportunity for psychologists to study how people reason and learn about physical interactions in an engaging, gamified setting.
d60 9
a68 4
Traditionally, psychologist have relied on using blicket detectors to emulate causal relationships.
For example, an experimenter might show a child several wooden blocks with various perceptual properties (e.g., color, size, shape) and then place them individually on top of a homemade light box (aka blicket detector).
If an object is a blicket, the experimenter toggles a hidden switch that causes the box to flash and play music.
The goal is to see how the child generalizes from tested objects to novel ones: Does the child generalize based on perceptual, causal, or a mixture of properties?
d76 10
d87 1
a87 12
This approach has several practical limitations.
First, the experimenter has to find all the parts and build a blicket detector using hot glue gun and a soldering iron ([instructions](http://depts.washington.edu/idl/light_detail.htm)).
This process can be an expensive and challenging, especially if she's not an electrician.
Second, relying on a confederate to appropriately and accurately toggle the blicket detector introduces experimental design problems.
An inconsistent temporal delay or advance might cause a participant to question validity of the causal relationship.
Additionally, the confederate's anticipation of upcoming blickets might signal to the participants that there's something special about them aside from their causal properties.
Finally, it would be difficult to create more complicated experiments involving causal interventions and/or continuous variables.

Sifteo overcomes each of the aforementioned limitations.
Each Sifteo Cube has calibrated object detecting sensors, removing any possibility of a confederate botching collision timing.
Sifteo provides an API (Application Programming Interface) that allows the experimenter to program the logic of the experiment and upload it to the cubes beforehand so that both the participant and the confederate are blind to the condition, avoiding any unintentional signaling.
Most importantly, Sifteo provides endless possibilities for creating (and recreating) interesting psychological experiments.
d89 1
a89 1
To illustrate, we recreate a classic causal learning experiment by Gopnik & Sobel (2000) using Sifteo Cubes.
d91 2
a92 9

If you'd like to learn more about Sifteo and "intelligent play," watch this TED talk by former MIT Media Lab grad student, [David Merrill](http://alumni.media.mit.edu/~dmerrill/).

<iframe src="http://embed.ted.com/talks/david_merrill_demos_siftables_the_smart_blocks.html" width="560" height="315" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>

#Experiment

Blickets were first used in a seminal developmental study conducted by Gopnik & Sobel (2000).
They looked at how the causal properties of objects (e.g., making a blicket detector flash and play music) shape toddlers conceptual knowledge.
d94 2
a95 3
This was motivated by many prominent psychologist, including Piaget, theorizing that young children were unable to understand, and therefore, categorize objects based on causal properties.
To test this theory, Gopnik and Sobel pitted perceptual features against causal ones in a simple, yet elegant, category learning paradigm.

d99 1
a99 1
To pit various perceptual features, such as color and shape, against causal ones, Gopnik and Sobel constructed seven sets of four objects out of wooden blocks.
d139 3
a141 2
In sets 1 through 4, two objects were randomly assigned to be blickets.
In sets 5 and 6, two perceptually conflicting blickets were chosen.
d143 1
a143 1
Each child was placed either in the "induction" or "categorization" condition.
d148 1
d154 1
@


1.408
log
@vim
@
text
@d77 1
a77 1
To illustrate, we recreate a now-classic causal learning experiment by Gopnik & Sobel (2000) using Sifteo Cubes.
@


1.407
log
@vim
@
text
@d75 1
a75 1
Most importantly, Sifteo provides endless possibilities for creating interesting psychological experiments.
@


1.406
log
@vim
@
text
@d77 1
a77 1
To illustrate, we recreate a now classic causal learning experiment by Gopnik & Sobel (2000) using Sifteo Cubes.
@


1.405
log
@vim
@
text
@d77 2
@


1.404
log
@vim
@
text
@d75 1
a75 1
Most importantly, Sifteo provides endless possibilities for creating interesting psychology experiments.
@


1.403
log
@vim
@
text
@d75 1
a75 1
Finally, Sifteo provides endless possibilities when it comes to experimental design possibilities 
@


1.402
log
@vim
@
text
@d73 2
a74 2
Sifteo's provides an API (Application Programming Interface) that grants the experimenter access to each cube's object sensors, removing any possibility of the confederate botching collision timing.
The API allows the experimenter to program the logic of the experiment beforehand so that both the participant and the confederate are blind to the condition, avoiding any unintentional signaling.
@


1.401
log
@vim
@
text
@d73 3
a75 2
First, Sifteo's provides an API (Application Programming Interface) that grants the experimenter access to each cube's object sensors, removing any possibility of the confederate botching collision timing.
Second, the API allows the experimenter to program the logic of the experiment beforehand so that both the participant and the confederate are blind to the condition, avoiding any unintentional signaling.
@


1.400
log
@vim
@
text
@d73 1
a73 1
First, Sifteo's provides an API (Application Programming Interface) that grants the experimenter access to each cube's object sensors, removing the possibility of the confederate botching collision timing.
@


1.399
log
@vim
@
text
@d73 1
a73 1
First, Sifteo's provides an API (Application Programming Interface) that grants the experimenter access to each cube's object sensors, resolving any issue of a confederate botching collision timing.
@


1.398
log
@vim
@
text
@d73 1
a73 1
First, Sifteo's provides an API (Application Programming Interface) that grants the experimenter access to each cube's object sensors, resolving any issue of having a confederate mess up collision timing.
@


1.397
log
@vim
@
text
@d73 1
a73 1
First, Sifteo's provides an API (Application Programming Interface) that allows the experimenter access the object sensors, resolving the issue of having a confederate botch the experiment because he or she messed up the timing. 
@


1.396
log
@vim
@
text
@d72 3
a74 3
Sifteo overcomes all of the light box's limitations.
Sifteo's provides an API (Application Programming Interface) that allows the experimenter to program the logic of the experiment beforehand. 
This resolves the issue of having a confederate botch the experiment because he or she 
@


1.395
log
@vim
@
text
@d72 3
a74 2
Sifteo overcomes each of the light boxes limitations.
Sifteo's API (Application Programming Interface) 
@


1.394
log
@vim
@
text
@d72 2
a73 1
The interactivity and programmer interface of Sifteo Cubes
@


1.393
log
@vim
@
text
@d2 1
a2 1
This repository provides instructions, materials, and code for creating Sifteo "blickets." 
@


1.392
log
@vim
@
text
@d5 1
a5 1
**Sifteo provides a free simulator, so you can follow this tutorial without purchasing any Sifteo cubes.**
@


1.391
log
@vim
@
text
@d5 1
a5 1
Sifteo provides a free simulator, so you can follow this tutorial without purchasing any Sifteo cubes.
@


1.390
log
@vim
@
text
@d2 1
d4 2
a5 1
 This repository provides instructions, materials, and code for creating Sifteo "blickets." Sifteo provides a free simulator, so you can follow this tutorial without purchasing any Sifteo cubes.
a6 1
#Quick start
@


1.389
log
@vim
@
text
@d63 1
a63 1
This approach has several methodological limitations.
@


1.388
log
@vim
@
text
@d20 1
a20 1
Inside the SDK, navigate to this tutorial, build it, and then run it in the siftulator
@


1.387
log
@vim
@
text
@d164 2
a165 2
1. Interventions (touch screen + neighborhoods)
2. Continuous causal power (tilt)
@


1.386
log
@vim
@
text
@d163 1
a163 1
##Advanced
@


1.385
log
@vim
@
text
@d31 1
a31 1
##What are blickets?
d42 1
a42 1
##What are Sifteo Cubes?
@


1.384
log
@vim
@
text
@d5 26
a137 26

#Quick start
Install the SDK from Sifteo ([SDK download](https://developers.sifteo.com/docs/SifteoSDK/0.9.8/getting_started.html))

Clone this repo

```bash
git clone https://github.com/jbmartin/SifteoBlickets.git 
```

Start "siftulator" (simulator)

* Windows: double click sifteo-sdk-shell.cmd
* Mac OS X: double click sifteo-sdk-shell.command
* Linux: run sifteo-sdk-shell.sh

Inside the SDK, navigate to this tutorial, build it, and then run it in the siftulator

```bash
cd SifteoBlickets
make
siftulator -n 5 SifteoBlickets.elf
```

Congratulations! You just ran your own blicket experiment.

@


1.383
log
@vim
@
text
@a36 1

a59 6
They used a blicket detector (shown above) to identify blickets.
An experimenter placed objects (usually wooden blocks of various shapes and colors) on top of the blicket detector.
If the object is a blicket, predetermined by the experimenter, the light panel of the blicket detector flashes and an internal mechanism plays a short tune.
In reality, the "blicketness" of an object is entirely arbitrary, so their's no way to actually detect it.
The detector is set off by a hidden switch toggled by the experimenter's foot.

@


1.382
log
@vim
@
text
@d61 1
a61 1
Gopnik and Sobel used a blicket detector (shown above) to identify blickets.
@


1.381
log
@vim
@
text
@a54 7
Blickets have been used extensively for studying how people, mainly children, learn and reason about causality.
These studies use a blicket detector (shown above) to identify blickets.
The experimenter places objects (usually wooden blocks of various shapes and colors) on top of the blicket detector.
If the object is a blicket, predetermined by the experimenter, the light panel of the blicket detector flashes and an internal mechanism plays a short tune.
In reality, the "blicketness" of an object is entirely arbitrary, so their's no way to actually detect it.
The detector is set off by a hidden switch toggled by the experimenter's foot.

d61 7
@


1.380
log
@vim
@
text
@d56 1
a56 1
These studies use a blicket detector (shown below) to identify blickets.
@


1.379
log
@vim
@
text
@d31 1
d34 2
a61 4
![][blicket_detector]

[blicket_detector]: http://depts.washington.edu/idl/images/Blicket_top.jpg

@


1.378
log
@vim
@
text
@d16 1
a16 1
##What is a Sifteo Cube?
@


1.377
log
@vim
@
text
@d16 1
a16 1
#What is a Sifteo Cube?
@


1.376
log
@vim
@
text
@d16 1
a16 1
#Psychology and Sifteo
@


1.375
log
@vim
@
text
@d15 1
@


1.374
log
@vim
@
text
@d15 33
a117 28
#Psychology and Sifteo
Sifteo offers a unique gaming platform centered around interactive 1.5 inch cubes each with their own LCD touch screen, motion sensor, accelerometer, and nearby object sensing abilities.
Basically, they're programmable iPod nanos that can touch and talk to one another!
These feature packed little cubes present an exciting opportunity for psychologists to study how people reason and learn about physical interactions in an engaging, gamified setting.

![][sifteo_cubes]

[sifteo_cubes]: http://www.ufunk.net/wp-content/uploads/2011/08/Sifteo-Cubes.jpg

Traditionally, psychologist have relied on using blicket detectors to emulate causal relationships.
For example, an experimenter might show a child several wooden blocks with various perceptual properties (e.g., color, size, shape) and then place them individually on top of a homemade light box (aka blicket detector).
If an object is a blicket, the experimenter toggles a hidden switch that causes the box to flash and play music.
The goal is to see how the child generalizes from tested objects to novel ones: Does the child generalize based on perceptual, causal, or a mixture of properties?

![][blicket_guts]

[blicket_guts]: http://depts.washington.edu/idl/images/blicket_internal_bottom.jpg


This approach has several methodological limitations.
First, the experimenter has to find all the parts and build a blicket detector using hot glue gun and a soldering iron ([instructions](http://depts.washington.edu/idl/light_detail.htm)).
This process can be an expensive and challenging, especially if she's not an electrician.
Second, relying on a confederate to appropriately and accurately toggle the blicket detector introduces experimental design problems.
An inconsistent temporal delay or advance might cause a participant to question validity of the causal relationship.
Additionally, the confederate's anticipation of upcoming blickets might signal to the participants that there's something special about them aside from their causal properties.
Finally, it would be difficult to create more complicated experiments involving causal interventions and/or continuous variables.

The interactivity and programmer interface of Sifteo Cubes
a119 4
If you'd like to learn more about Sifteo and "intelligent play," watch this TED talk by former MIT Media Lab grad student, [David Merrill](http://alumni.media.mit.edu/~dmerrill/).

<iframe src="http://embed.ted.com/talks/david_merrill_demos_siftables_the_smart_blocks.html" width="560" height="315" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>

@


1.373
log
@vim
@
text
@d16 2
@


1.372
log
@vim
@
text
@d19 1
a19 1
If the object is a blicket, predetermined by the experimenter, the light panel of the blicket detector flashes and an internal mechanism plays a short tune (You can build your own here! .
@


1.371
log
@vim
@
text
@d83 1
a83 1
##Psychology and Sifteo
@


1.370
log
@vim
@
text
@d33 1
a33 1
###Materials
d71 1
a71 1
###Procedure
@


1.369
log
@vim
@
text
@d146 1
a146 1
##Under the hood: Into the darkness known as C++
@


1.368
log
@vim
@
text
@d117 1
a117 1
##Quick start
@


1.367
log
@vim
@
text
@d117 1
a117 1
##Basics
@


1.366
log
@vim
@
text
@a116 4
![][screen_shot]

[screen_shot]: https://github.com/jbmartin/SifteoBlickets/blob/master/blog_assets/screen_shot.png?raw=true

d142 1
d144 1
@


1.365
log
@vim
@
text
@d136 1
a136 1
Inside siftulator, navigate to this tutorial, build it, and then run it
@


1.364
log
@vim
@
text
@d136 1
a136 1
Inside siftulator, navigate to this tutorial and build it
@


1.363
log
@vim
@
text
@d141 1
@


1.362
log
@vim
@
text
@a116 8
Todo(Jay):
Discuss
- [X] double blind 
- [X] no experimenter mistakes toggling baskets
- [X] no soldering or hot glue guns
- [X] equal if not cheaper to make
- [ ] allow interventions and other unexplored tactile features

@


1.361
log
@vim
@
text
@d95 1
a95 1
The goal is to see how the child generalizes from tested objects to novel ones: Does the child generalize based on perceptual, causal, or a mixture of both properties?
@


1.360
log
@vim
@
text
@d95 1
a95 1
The goal is to see how the child generalizes from the objects that were tested on the detector to novel ones: Does the child generalize based on perceptual, causal, or a mixture of both properties?
@


1.359
log
@vim
@
text
@d83 1
a83 1
##Sifteo and psychology
@


1.358
log
@vim
@
text
@d83 1
a83 1
##How can Sifteo Cubes help psychology?
@


1.357
log
@vim
@
text
@d83 1
a83 1
##How do Sifteo cubes help?
@


1.356
log
@vim
@
text
@d95 1
a95 1
The goal is to see how the child generalizes from the objects that were tested on the detector to novel ones: Does the child generalize based on perceptual properties, causal properties, or both?
@


1.355
log
@vim
@
text
@d113 1
a113 1
If you'd like to learn more about Sifteo and "intelligent play", watch this TED talk by former MIT Media Lab grad student, [David Merrill](http://alumni.media.mit.edu/~dmerrill/).
@


1.354
log
@vim
@
text
@d110 1
a110 1
Sifteo Cubes offer a controlled 
@


1.353
log
@vim
@
text
@d102 1
a102 1
This approach has several limitations.
@


1.352
log
@vim
@
text
@d95 1
a95 1
The goal is to see how the child generalizes from the objects that were tested to novel ones: Does the child generalize based on perceptual properties, causal properties, or both?
@


1.351
log
@vim
@
text
@d93 1
a93 1
An experimenter, for example, might show a child several wooden blocks with various perceptual properties (e.g., color, size, shape) and then place them individually on top of a homemade light box (aka blicket detector).
@


1.350
log
@vim
@
text
@d86 1
a86 1
These feature packed little cubes present an exciting opportunity for psychologists to study how people reason and learn about physical interactions in a gamified setting.
@


1.349
log
@vim
@
text
@d86 1
a86 1
These feature packed cubes present an exciting opportunity for psychologists to study how people reason and learn about physical interactions in a setting that's fun for participants.
@


1.348
log
@vim
@
text
@d86 1
a86 1
These feature packed little guys present an exciting opportunity for psychologists to study how people reason and learn about physical interactions in a setting that's fun for participants.
@


1.347
log
@vim
@
text
@d110 1
a110 1
Sifteo Cubes  
@


1.346
log
@vim
@
text
@d108 1
a108 1
Finally, it would be difficult to create more complicated experiments involving causal interventions or continuous variables.
@


1.345
log
@vim
@
text
@d104 1
a104 1
This can be an expensive and challenging process, especially if she's not an electrician.
d110 1
a110 1
Sifteo Cubes 
@


1.344
log
@vim
@
text
@d104 1
a104 1
This can be an expensive and challenging process, especially if you're not an electrician.
@


1.343
log
@vim
@
text
@d95 1
a95 1
The goal is to see how the child generalizes from the objects they were shown to novel ones: Does the child generalize based on perceptual properties, causal properties, or both?
@


1.342
log
@vim
@
text
@d93 1
a93 1
For example, an experimenter might show a child several wooden blocks with various perceptual properties (e.g., color, size, shape) and then place them individually on top of a homemade light box (aka blicket detector).
@


1.341
log
@vim
@
text
@d108 1
a108 1
Finally, it would be difficult to create more complicated experiments involving causal interventions or continuous variables with the traditional blicket detector.
@


1.340
log
@vim
@
text
@d108 1
a108 1
Finally, it would be difficult to create an experiment involving causal interventions or continuous variables with the traditional blicket detector.
@


1.339
log
@vim
@
text
@d86 1
a86 1
These feature packed little guys present an exciting opportunity for psychologists to study how people reason and learn about physical interactions between objects in a setting that's fun for participants.
@


1.338
log
@vim
@
text
@d113 1
a113 1
If you'd like to learn more about Sifteo, watch this TED talk by former MIT Media Lab grad student, [David Merrill](http://alumni.media.mit.edu/~dmerrill/).
@


1.337
log
@vim
@
text
@d113 1
a113 1
created by former MIT Media Lab grad student, [David Merrill](http://alumni.media.mit.edu/~dmerrill/).
@


1.336
log
@vim
@
text
@a114 5

![][sifteoblocks]

[sifteoblocks]: http://media.gdgt.com/img/products/469/a2c6/a2c6-800.jpg

@


1.335
log
@vim
@
text
@d105 1
a105 1
Second, relying on a confederate to appropriately and accurately toggle the blicket detector introduces experimental design problems. 
d108 1
a108 1
Finally, it would be difficult to conduct an experiment involving causal interventions or continuous variables with the traditional blicket detector.
@


1.334
log
@vim
@
text
@d86 1
a86 1
These feature packed little guys present an exciting opportunity for psychologists interested in studying how people learn and reason to look at complicated physical interactions between objects in a setting that's fun for participants.
d92 1
a92 1
Traditionally, psychologist have relied on using blicket detectors to emulate causal relationships between objects.
@


1.333
log
@vim
@
text
@d86 1
a86 1
These feature packed little guys present an exciting opportunity for psychologists interested in studying how people learn and reason to look at complicated physical interactions between objects in fun setting.
@


1.332
log
@vim
@
text
@d86 1
a86 1
These feature packed little guys present an exciting opportunity for psychologists interested in studying how people learn and reason to look at complicated physical interactions between objects.
@


1.331
log
@vim
@
text
@d86 1
a86 1
These feature packed little guys present an exciting opportunity for psychologists interested in studying how people learn and reason to look at more complicated physical interactions between objects.
@


1.330
log
@vim
@
text
@d89 1
@


1.329
log
@vim
@
text
@d88 3
@


1.328
log
@vim
@
text
@d88 5
a96 4
Traditionally, psychologist have relied on using blicket detectors to emulate causal relationships between objects.
For example, an experimenter might show a child several wooden blocks with various perceptual properties (e.g., color, size, shape) and then place them individually on top of a homemade light box (aka blicket detector).
If an object is a blicket, the experimenter toggles a hidden switch that causes the box to flash and play music.
The goal is to see how the child generalizes from the objects they were shown to novel ones: Does the child generalize based on perceptual properties, causal properties, or both?
@


1.327
log
@vim
@
text
@d89 1
@


1.326
log
@vim
@
text
@a22 1
![][blicket_guts]
d88 1
@


1.325
log
@vim
@
text
@d102 1
a102 1
Finally, conducting experiment that involves causal interventions or continuous variables would be very challenging if not impossible with the traditional blicket detector.
@


1.324
log
@vim
@
text
@a25 1
[blicket_guts]: http://depts.washington.edu/idl/images/blicket_internal_bottom.jpg
d89 2
@


1.323
log
@vim
@
text
@d103 2
@


1.322
log
@vim
@
text
@d101 1
a101 1
Finally, conducting experiment that involve causal interventions or continuous variables would be very challenging if not impossible with a simple light box and toggle switch.
@


1.321
log
@vim
@
text
@d101 2
d115 2
a116 2
- [ ] double blind 
- [ ] no experimenter mistakes toggling baskets
@


1.320
log
@vim
@
text
@d100 1
a100 1
Additionally, the confederate's anticipation of blickets might signal to the participants that there's something special about them aside from their causal properties.
@


1.319
log
@vim
@
text
@d100 1
a100 1
The confederate's anticipation of blickets might signal to the participants that there's something special about them aside from their causal properties.
@


1.318
log
@vim
@
text
@d100 1
a100 1
Equally problematic is that the confederate's anticipation of blickets might signal to the participants that there's something special about them aside from their causal properties.
@


1.317
log
@vim
@
text
@d97 1
a97 1
This can be an expensive and challenging process, especially for those of us who are not electricians.
@


1.316
log
@vim
@
text
@d100 1
a100 1
Equally problematic is that the confederate's anticipation of blickets could signal to the participant that there's something special about them aside from their causal properties.
@


1.315
log
@vim
@
text
@d100 1
a100 1
Equally problematic is that the confederate's knowledge of which blocks are blickets might signal to the participant
@


1.314
log
@vim
@
text
@d99 2
a100 1
An inconsistent temporal delay or advance might hurt the believability of the causal relationship.
@


1.313
log
@vim
@
text
@d98 2
a99 1
Second, 
@


1.312
log
@vim
@
text
@d96 1
a96 1
First, the experimenter has to find all the parts and build a blicket detector using hot glue guns and a soldering iron ([instructions](http://depts.washington.edu/idl/light_detail.htm)).
@


1.311
log
@vim
@
text
@d97 1
a97 1
This can be a expensive and challenging process, especially for those of us who are not electricians.
@


1.310
log
@vim
@
text
@d97 3
a99 1
This can be a challenging process, especially for those of us who are not electricians.
d113 2
a114 2
- [ ] no soldering or hot glue guns
- [ ] equal if not cheaper to make
@


1.309
log
@vim
@
text
@d97 1
a97 1

@


1.308
log
@vim
@
text
@d96 1
a96 1
First, the experimenter has to find all the parts and build a blicket detector using hot glue guns and a soldering iron ([diy](http://depts.washington.edu/idl/light_detail.htm)).
@


1.307
log
@vim
@
text
@d96 1
a96 1
First, the experimenter has to find all the parts and build a blicket detector using hot glue guns and a soldering iron ([instructions](http://depts.washington.edu/idl/light_detail.htm)).
@


1.306
log
@vim
@
text
@d96 1
a96 1
First, the experimenter has to find the parts and build the blicket detector using hot glue guns and a soldering iron ([instructions](http://depts.washington.edu/idl/light_detail.htm)).
@


1.305
log
@vim
@
text
@d96 1
a96 2
First, the experimenter has to find the parts and build the blicket detector using hot glue guns and a soldering iron ([instructions](http://depts.washington.edu/idl/light_detail.htm)), this can be challenging for someone who has little to no experience 

@


1.304
log
@vim
@
text
@d95 2
a96 2
This approach is limited because the experimenter has to build the blicket detector,   
While a fun weekend project ([instructions](http://depts.washington.edu/idl/light_detail.htm)), this can be challenging for someone who has little to no experience 
@


1.303
log
@vim
@
text
@d95 1
a95 1
The downsides to this approach is that the experimenter has to build the blicket detector.
@


1.302
log
@vim
@
text
@d87 1
a87 1
Basically, they're programmable iPod nanos that can feel and talk to one another!
a99 1
Each cubes offer a fresh take on video game design, offering tiny programmable cubes that talk to one another.
@


1.301
log
@vim
@
text
@d96 1
a96 1
While a fun weekend project ([instructions](http://depts.washington.edu/idl/light_detail.htm)), 
@


1.300
log
@vim
@
text
@d96 1
a96 1
While a fun weekend project ([traditional blicket detector instructions](http://depts.washington.edu/idl/light_detail.htm)), 
@


1.299
log
@vim
@
text
@d19 1
a19 1
If the object is a blicket, predetermined by the experimenter, the light panel of the blicket detector flashes and an internal mechanism plays a short tune (You can build your own here! [Traditional blicket detector instructions](http://depts.washington.edu/idl/light_detail.htm)).
d95 3
@


1.298
log
@vim
@
text
@d93 1
a93 7
The goal is to see how the child generalizes from the objects they were shown to novel ones: Does he or she generalize based on perceptual properties, causal properties, or both?

a popular paradigm for studying how children categorize objects based on causal properties is Blicket detectors have been .
Building
a popular paradigm for studying how children categorize objects based on causal properties is Blicket detectors have been .
Building

@


1.297
log
@vim
@
text
@d90 1
a90 1
Traditionally, developmental psychologist have relied on using blicket detectors to emulate causal relationships between objects.
@


1.296
log
@vim
@
text
@d91 1
a91 1
For example, an experimenter might show children several wooden blocks with various perceptual properties (e.g., color, size, shape) and then place them individually on top of a homemade light box (aka blicket detector).
d93 1
a93 1
The goal is to see how children generalize from the objects they were shown to novel ones.
@


1.295
log
@vim
@
text
@a111 13
i.e., explain what sifteo blocks are, why they are kind of exciting for psychology, lots of picture of the cubes,
maybe we can make a quick video clip of the cubes in action during the blicket game, etc...  and then the 
post could end by saying "to help demonstrate the utility of the cube in research, I developed a simple bit 
of code that runs the G&S blicket paradigm which is a classic student in causal learning"... then link to your
more detailed summary which codes into documenting the code.  

posting that on our blog will push traffic to your github page and raise the visibility.  Also nice because there 
will be this short overview for people who aren't even at the point of recognizing that "sifteo blickets" would 
be a interesting/useful psychology paradigm rather than simply some kind of game/random github code 
module/etc...  basically i think your audience is people who don't know what sifteo is, don't know what
github is, but could benefit from the technology.  thus conveying the main point/sales pitch in one place, 
then sharing the details/code will help.

@


1.294
log
@vim
@
text
@d91 1
a91 1
For example, an experimenter might show children several wooden blocks with different perceptual properties (e.g., color, size, shape) and then place them individually on top of a homemade light box (aka blicket detector).
d93 1
a93 1
The goal is to learn how children generalize from the objects they were shown to novel ones.
@


1.293
log
@vim
@
text
@d93 1
a93 1
The goal is to learn how children generalize from the objects that did or did not trigger the blicket detector to novel objects.
@


1.292
log
@vim
@
text
@d91 1
a91 1
For example, an experimenter might show children several wooden blocks with different perceptual properties (e.g., color, size, shape) and then place them top of a homemade light box (aka blicket detector).
d93 1
a93 1
The idea is to learn how children generalize to novel objects based on perceptual and causal properties that triggered the blicket detector.
@


1.291
log
@vim
@
text
@d91 2
a92 3
For example, an experimenter might show children several wooden blocks with different perceptual properties (e.g., color, size, shape).
and then places them top of a homemade light box (the blicket detector).
If an object is a blicket, the experimenter secretly toggles a switch that flashes the light box and plays music.
@


1.290
log
@vim
@
text
@d91 1
a91 1
For example, an experimenter shows children several objects with different perceptual properties (e.g., color, size, shape).
@


1.289
log
@vim
@
text
@d91 3
a93 2
For example, participants are shown objects with different perceptual properties (e.g., color, size, shape).
An experimenter places the objects on top of a homemade light box (the blicket detector); if an object is a blicket, a confederate of the experiment secretly toggles a switch that flashes the light box and plays music.
@


1.288
log
@vim
@
text
@d91 3
a93 1
Different objects are placed on top of a homemade light box (the blicket detector); if an object is a blicket, a confederate of the experiment secretly toggles a switch that flashes the light box and plays music.
@


1.287
log
@vim
@
text
@d91 1
a91 1
Different objects are placed on top of a homemade light box (the blicket detector); if an object is a blicket, a confederate of the experiment secretly toggles a switch that flashes the light box.
@


1.286
log
@vim
@
text
@d91 1
a91 1
Objects are placed on top of a homemade light box (the blikcet detector); if that object is a blicket, a confederate of the experiment secretly toggles a switch that flashes the light box.
@


1.285
log
@vim
@
text
@d90 2
a91 1
Traditionally, developmental psychologist have relied on using blicket detectors to emulate causal 
@


1.284
log
@vim
@
text
@d89 2
a90 1
Traditionally, developmental psychologist have relied on using blicket detectors to emulate causal
@


1.283
log
@vim
@
text
@d88 1
a88 1
These feature packed little guys present an exciting opportunity for psychologists interested in studying how people learn and reason to look at more complicated physical relationships between objects.
@


1.282
log
@vim
@
text
@d88 1
a88 1
These feature packed little toys present an exciting opportunity for psychologists interested in studying how people learn and reason to look at more complicated physical relationships between objects.
@


1.281
log
@vim
@
text
@d88 1
a88 1
These feature packed little toys present exciting new opportunities for psychologists interested in studying learning and reasoning to look at more complicated object interactions.
@


1.280
log
@vim
@
text
@d88 2
a89 1
These feature packed little toys present exciting new opportunities for psychologists interested in studying learning and reasoning.
d91 4
a94 1
Blicket detectors have been a popular paradigm for studying how children categorize objects based on causal properties.
@


1.279
log
@vim
@
text
@d90 3
@


1.278
log
@vim
@
text
@d88 1
a88 1
These feature packed toys present exciting new opportunities for psychologists interested in studying learning and reasoning.
@


1.277
log
@vim
@
text
@d88 1
a88 1
These capabilities present exciting new opportunities for psychologists interested in studying learning and reasoning.
@


1.276
log
@vim
@
text
@d87 1
a87 1
Basically, they're programmable iPod nanos that can feel and talk to one another.
@


1.275
log
@vim
@
text
@d88 1
a88 1
These capabilities present exciting new opportunities for psychologists interested in studying developmental learning and reasoning.
@


1.274
log
@vim
@
text
@d88 2
a89 1
These capabilities present exciting new opportunities
@


1.273
log
@vim
@
text
@d87 2
a88 1
Basically, they're programmable iPod nanos that can talk to and feel one another.
@


1.272
log
@vim
@
text
@d87 1
a87 1
Basically, they're programmable iPod nanos that can talk to and touch one another.
@


1.271
log
@vim
@
text
@d87 1
a87 1
Basically, they're programmable iPod nanos that can talk and touch one another.
@


1.270
log
@vim
@
text
@d87 1
a87 1
Basically, programmable iPod nanos that can talk to one another!
@


1.269
log
@vim
@
text
@d86 1
a86 1
Sifteo offers a unique gaming platform centered around interactive 1.5 inch cubes each with their own LCD touch screens, motion sensors, accelerometers, and nearby object sensing abilities.
@


1.268
log
@vim
@
text
@d86 2
a87 2
Sifteo offers a unique gaming platform centered around 1.5 inch cubes each with their own LCD touch screens, motion sensors, accelerometers, and nearby object sensing abilities.
They can talk to each other!
@


1.267
log
@vim
@
text
@d87 1
a87 1
I.e., they can talk to each other!
@


1.266
log
@vim
@
text
@d86 4
a89 1
Sifteo Cubes offer a unique interactive gaming platform created by former MIT Media Lab grad student, [David Merrill](http://alumni.media.mit.edu/~dmerrill/).
@


1.265
log
@vim
@
text
@d86 2
a87 1
Sifteo cubes offer a fresh take on video game design, offering tiny programmable cubes that talk to one another.
@


1.264
log
@vim
@
text
@d86 2
a87 1
Sifteo cubes are a new "toy" offering  
@


1.263
log
@vim
@
text
@d90 1
a90 1
[sifteoblocks]: (http://media.gdgt.com/img/products/469/a2c6/a2c6-800.jpg)
@


1.262
log
@vim
@
text
@d90 1
a90 1
[sifteoblocks](http://media.gdgt.com/img/products/469/a2c6/a2c6-800.jpg)
@


1.261
log
@vim
@
text
@d88 2
a89 1
![][sifteblocks]
@


1.260
log
@vim
@
text
@d3 1
a3 1
 This repository provides instructions, materials, and code for creating Sifteo "blickets." Sifteo provides a free simulator, so you can follow this tutorial without purchasing any Sifteo blocks.
d85 5
a89 2
##How do Sifteo blocks help?
Sifteo cubes are 
@


1.259
log
@vim
@
text
@d86 16
a101 1
Add brief description and links
@


1.258
log
@vim
@
text
@a146 2


@


1.257
log
@vim
@
text
@a4 1

@


1.256
log
@vim
@
text
@a4 1
 hi john
@


1.255
log
@vim
@
text
@d5 2
@


1.254
log
@vim
@
text
@d3 1
a3 1
 This repository provides instructions, materials, and code for creating Sifteo "blickets." Sifteo provides a free simulator, so following this tutorial does not require purchasing any Sifteo blocks.
@


1.253
log
@vim
@
text
@d37 2
a38 1
To pit various perceptual features, such as color and shape, against causal ones, Gopnik and Sobel constructed seven sets of four objects out of wooden blocks. Below is our attempt to recreate those objects using Adobe Illustrator. These materials are freely available in the [asset folder](https://github.com/jbmartin/SifteoBlickets/tree/master/assets) of this git repository.
@


1.252
log
@vim
@
text
@d14 1
a14 1
1. (_philosophy_) An object with certain properties causing it to trigger a "blicket detector" (a device that lights up and plays music), introduced in certain experiments relating to causality and perception ([wikitonary](http://en.wiktionary.org/wiki/blicket)).
@


1.251
log
@vim
@
text
@d87 8
@


1.250
log
@vim
@
text
@d113 1
a113 1
Congradulations! You just ran your own blicket experiment.
@


1.249
log
@vim
@
text
@d129 1
a129 1
Todo(Jay): 
@


1.248
log
@vim
@
text
@d131 5
a135 5
- [] neighborhoods
- [] touch events
- [] callbacks
- [] sprites
- [] audio
@


1.247
log
@vim
@
text
@d129 2
a130 1
discuss 
@


1.246
log
@vim
@
text
@d127 12
@


1.245
log
@vim
@
text
@d125 1
a125 1
We'll do our best to help you figure out how to deal with it or where to go when you're stuck.
@


1.244
log
@vim
@
text
@d124 2
a125 1
However, it still rears its ugly head from time to time and we'll do our best to help you figure out how to deal with it. 
@


1.243
log
@vim
@
text
@d122 1
a122 1
It's shines in large scale production software suits like operating systems or video games where speed and memory are critical (e.g., tiny game cubes with limited memory and large cpu demands).
@


1.242
log
@vim
@
text
@d122 1
a122 1
It's strengths are found in large scale production software suits like operating systems or video games where speed and memory are critical (e.g., tiny game cubes with limited memory and large cpu demands).
d124 1
@


1.241
log
@vim
@
text
@d122 2
a123 2
It's strengths are found in large scale production software suits like operating systems or video games where speed and memory are critical.
Fortunately, the Sifteo API wraps up most if not all  ()
@


1.240
log
@vim
@
text
@d117 1
a117 1
##Under the hood: into the darkness known as C++
@


1.239
log
@vim
@
text
@d117 1
a117 1
##Under the hood: into the darkness that is C++
@


1.238
log
@vim
@
text
@d119 5
a123 2
Sifteo uses a popular programming language called C++. 

@


1.237
log
@vim
@
text
@d119 1
@


1.236
log
@vim
@
text
@d106 2
a107 1
Insidue siftulator, navigate to this tutorial and build it
@


1.235
log
@vim
@
text
@d95 1
@


1.234
log
@vim
@
text
@d85 1
a85 1
Brief description and links
@


1.233
log
@vim
@
text
@d84 2
a90 3
##How do Sifteo blocks help?
Brief description and links

@


1.232
log
@vim
@
text
@d116 1
a116 1
##Under the hood: Into the darkness that is C++
@


1.231
log
@vim
@
text
@d116 1
a116 2
##Under the hood
###Into the darkness that is C++
@


1.230
log
@vim
@
text
@d116 2
a117 1
##Under the hood: Into the darkness that is C++
@


1.229
log
@vim
@
text
@d114 3
a116 1
##Under the hood
@


1.228
log
@vim
@
text
@d114 4
@


1.227
log
@vim
@
text
@d112 2
@


1.226
log
@vim
@
text
@d106 1
a106 1
Insidue siftulator, navigate to this tutorial
@


1.225
log
@vim
@
text
@d101 1
@


1.224
log
@vim
@
text
@d101 3
a103 3
 * Windows: double click sifteo-sdk-shell.cmd
 * Mac OS X: double click sifteo-sdk-shell.command
 * Linux: run sifteo-sdk-shell.sh
@


1.223
log
@vim
@
text
@d101 3
a103 3
  * Windows: double click sifteo-sdk-shell.cmd
  * Mac OS X: double click sifteo-sdk-shell.command
  * Linux: run sifteo-sdk-shell.sh
@


1.222
log
@vim
@
text
@d101 3
a103 3
  - Windows: double click sifteo-sdk-shell.cmd
  - Mac OS X: double click sifteo-sdk-shell.command
  - Linux: run sifteo-sdk-shell.sh
@


1.221
log
@vim
@
text
@d101 1
a101 1
  -  Windows: double click sifteo-sdk-shell.cmd
@


1.220
log
@vim
@
text
@d105 1
a105 1
Navigate to this tutorial
@


1.219
log
@vim
@
text
@d107 1
a107 1
cd [saved location]/SifteoBlickets
@


1.218
log
@vim
@
text
@d96 1
a96 1
```shell
d106 1
a106 1
```shell
@


1.217
log
@vim
@
text
@d93 3
a95 2
1. Install the SDK from Sifteo ([SDK download](https://developers.sifteo.com/docs/SifteoSDK/0.9.8/getting_started.html))
3. Clone this repo
d99 2
a100 1
4. Start "siftulator" (simulator)
d104 6
a109 1
5. ...
@


1.216
log
@vim
@
text
@d99 1
a99 1
  - Windows: double click sifteo-sdk-shell.cmd
@


1.215
log
@vim
@
text
@d98 4
a101 1
4. Run Siftulator (simulator)
@


1.214
log
@vim
@
text
@d95 1
a95 1
```bash
@


1.213
log
@vim
@
text
@d95 1
a95 1
```
@


1.212
log
@vim
@
text
@d96 1
@


1.211
log
@vim
@
text
@d93 1
a93 1
1. Install the SDK from Sifteo ([SDK](https://developers.sifteo.com/docs/SifteoSDK/0.9.8/getting_started.html))
@


1.210
log
@vim
@
text
@d93 1
a93 2
1. Install the SDK from Sifteo
  - [SDK](https://developers.sifteo.com/docs/SifteoSDK/0.9.8/getting_started.html)
d95 2
@


1.209
log
@vim
@
text
@a92 1
0. Preinstallation (check on dependencies e.g., clang, c++, etc.)
@


1.208
log
@vim
@
text
@d82 1
a82 1
In the induction condition, the experimenter described two objects as being blickets and then individually placed all four objects on the detector.
@


1.207
log
@vim
@
text
@d82 1
a82 1
In the induction condition, the experimenter described two objects as being blickets and then placed all four objects on the detector.
@


1.206
log
@vim
@
text
@d82 1
a82 1
In the induction condition, the experimenter described two objects as blickets and then placed all four objects on the detector.
@


1.205
log
@vim
@
text
@d82 1
a82 2
In the induction condition, two objects were described as blickets and two were not.
The experimenter tested all four blickets with the detector and asked 
@


1.204
log
@vim
@
text
@d80 1
a80 1
In the categorization condition, the experimenter placed each of the 4 objects on the blicket detector separately and returned to their original spots.
d83 1
@


1.203
log
@vim
@
text
@d80 1
a80 1
In the categorization condition, the experimenter placed each of the 4 objects on the blicket detector separately.
d82 1
a82 1
In the induction condition,
@


1.202
log
@vim
@
text
@d81 1
a81 1
The experimenter then lifted up one of the blickets and asked which of the other blocks was also a blicket.
@


1.201
log
@vim
@
text
@d81 1
a81 1
The experimenter then lifted one of the blickets and asked which of the other blocks was also a blicket.
@


1.200
log
@vim
@
text
@d81 1
a81 1
The experiment then lifted one of the blickets and asked which of the other blocks was also a blicket.
@


1.199
log
@vim
@
text
@d80 4
a83 1
In the categorization condition, the experimenter placed each of the 4 objects on the blicket detector. 
@


1.198
log
@vim
@
text
@d78 1
a78 1
In set 5, for example, one blicket might be the green rounded rectangle and the other a red rounded rectangle.
@


1.197
log
@vim
@
text
@d75 1
a75 1
Set 1 was always presented first, followed by sets 2 through 7 randomly.
@


1.196
log
@vim
@
text
@d79 1
a79 1
Each child was placed either in the induction or categorization condition.
@


1.195
log
@vim
@
text
@d77 2
a78 2
In sets 5 and 6, two blickets were chosen to be conflicting.
In set 5, for example, 
@


1.194
log
@vim
@
text
@d74 7
a80 2
Seven sets of the four objects above were presented to children by an experimenter.
Set 1 was always presented first, followed by randomized order of sets 2 - 7.
@


1.193
log
@vim
@
text
@d73 4
@


1.192
log
@vim
@
text
@d37 1
a37 1
To pit various perceptual features, such as color and shape, against causal ones, Gopnik and Sobel constructed seven sets of four objects out of wooden blocks. Below is our attempt to recreate those objects using Adobe Illustrator. These materials are freely available in the [asset folder](https://github.com/jbmartin/SifteoBlickets/tree/master/assets) of this git repo.
@


1.191
log
@vim
@
text
@d37 1
a37 1
To pit various perceptual features, such as color and shape, against causal ones, Gopnik and Sobel constructed seven sets of four objects out of wooden blocks. Below is our attempt to recreate those objects using Adobe Illustrator. These materials are freely available under the [asset folder](https://github.com/jbmartin/SifteoBlickets/tree/master/assets) of this git repo.
@


1.190
log
@vim
@
text
@d37 1
a37 1
To pit various perceptual features, such as color and shape, against causal ones, Gopnik and Sobel constructed seven sets of four objects out of wooden blocks. Below is our attempt to recreate those objects using using Adobe Illustrator. These materials are freely available under the [asset folder](https://github.com/jbmartin/SifteoBlickets/tree/master/assets) of this git repo.
@


1.189
log
@vim
@
text
@d32 1
a32 1
This was largely due to many prominent psychologist, including Piaget, theorizing that young children were unable to understand, and therefore, categorize objects based on causal properties.
@


1.188
log
@vim
@
text
@d19 1
a19 1
If the object is a blicket, predetermined by the experimenter, the light panel of the blicket detector flashes and an internal mechanism plays a short tune (You can build your own here [Traditional blicket detector instructions](http://depts.washington.edu/idl/light_detail.htm)).
@


1.187
log
@vim
@
text
@d16 1
a16 1
Blickets have been used extensively for studying how people, mainly children, learn and reason about causality. 
d19 1
a19 1
If the object is a blicket, predetermined by the experimenter, the light panel of the blicket detector flashes and an internal mechanism plays a short tune (You can build your own! [Traditional blicket detector instructions](http://depts.washington.edu/idl/light_detail.htm)).
@


1.186
log
@vim
@
text
@d14 1
a14 1
1. ( *philosophy* ) An object with certain properties causing it to trigger a "blicket detector" (a device that lights up and plays music), introduced in certain experiments relating to causality and perception ([wikitonary](http://en.wiktionary.org/wiki/blicket)).
@


1.185
log
@vim
@
text
@d3 1
a3 1
 This repository provides instructions, materials, and code for creating Sifteo "blickets." Sifteo provides a free simulator, so following this tutorial does not require purchasing any Sifteo blocks not required.
@


1.184
log
@vim
@
text
@d3 1
a3 1
 This repository provides instructions, materials, and code for creating Sifteo "blickets." Sifteo provides an excellent free simulator, so following this tutorial does not require owning any Sifteo blocks not required.
@


1.183
log
@vim
@
text
@d3 1
a3 1
 This repository provides instructions, materials, and code for creating Sifteo "blickets." Sifteo blocks not required (see simulator section below).
@


1.182
log
@vim
@
text
@d13 1
a13 1
test
@


1.181
log
@vim
@
text
@d13 1
a13 1

@


1.180
log
@vim
@
text
@d14 1
a14 1
1. (*philosophy*) An object with certain properties causing it to trigger a "blicket detector" (a device that lights up and plays music), introduced in certain experiments relating to causality and perception ([wikitonary](http://en.wiktionary.org/wiki/blicket)).
@


1.179
log
@vim
@
text
@d8 1
a8 1
There's no such thing as a blicket; it's neologism created by psychologist to avoid people from having preconceived notions about what it is/isn't or what it can/can't do.
@


1.178
log
@vim
@
text
@a41 1

@


1.177
log
@vim
@
text
@d37 1
a37 1
To pit various perceptual features, such as color and shape, against causal ones, Gopnik and Sobel constructed seven sets of four objects out of wooden blocks. Below is our attempt to recreate those objects using using Adobe Illustrator. These materials are freely available under the [asset folder](https://github.com/jbmartin/SifteoBlickets/tree/master/assets) of this repo.
@


1.176
log
@vim
@
text
@d37 1
a37 1
To pit various perceptual features, such as color and shape, against causal ones, Gopnik and Sobel constructed seven sets of four objects out of wooden blocks. Below is our attempt to recreate those objects using using Adobe Illustrator. These materials are freely available under the [asset folder]() of this repo.
@


1.175
log
@vim
@
text
@a34 2


d37 1
a37 1
To pit various perceptual features, such as color and shape, against causal ones, Gopnik and Sobel constructed seven sets of four objects out of wooden blocks. Below is our attempt to recreate those objects using using Adobe Illustrator. These materials are freely available under the asset folder of this repo.
@


1.174
log
@vim
@
text
@d39 1
a39 1
To pit various perceptual features, such as color and shape, against causal ones, Gopnik and Sobel constructed seven sets of four objects out of wooden blocks. Below is our attempt to recreate those objects using using Adobe Illustrator. These are freely available under the asset folder of this repo.
@


1.173
log
@vim
@
text
@d39 1
a39 1
To pit various perceptual features, such as color and shape, against causal ones, Gopnik and Sobel constructed seven sets of four objects out of wooden blocks. Below is our attempt to recreate those objects using using Adobe Illustrator. These are available under the asset folder of this repo.
@


1.172
log
@vim
@
text
@d39 1
a39 1
To pit various perceptual features, such as color and shape, against causal ones, seven sets of four objects were constructed. Below are the images we created using Adobe Illustrator that reproduce the basic structure and appearance of materials used by Gopnik and Sobel (2000).
@


1.171
log
@vim
@
text
@d39 1
a39 1
To pit various perceptual features against causal ones, seven sets of four objects were constructed. Below are the images we created using Adobe Illustrator that reproduce the basic structure and appearance of materials used by Gopnik and Sobel (2000).
@


1.170
log
@vim
@
text
@d39 2
a40 1
To pit various perceptual features against causal ones, seven sets of four objects were constructed. Below are images we created using Adobe Illustrator that reproduce the structure and appearice of materials of Gopnik and Sobel (2000).
@


1.169
log
@vim
@
text
@d38 2
@


1.168
log
@vim
@
text
@d32 1
a32 1
This was largely due to many prominent psychologist, including Piaget, theorizing that young children were unable to categorize objects based on causal properties.
@


1.167
log
@vim
@
text
@d32 1
a32 1
Largely because many prominent psychologist (including Piaget) theorized that young children were unable to categorize objects based on causal properties.
@


1.166
log
@vim
@
text
@d33 1
a33 1
To test this theory, Gopnik and Sobel pitted perceptual features against causal ones.
@


1.165
log
@vim
@
text
@d31 1
a31 1
Previously, most developmental research focused on how perceptual features influence categorization.
d33 1
@


1.164
log
@vim
@
text
@d32 1
a32 1
Largely because many prominent psychologist (including Piaget) theorized that young children couldn't categorize objects based on causal properties.
@


1.163
log
@vim
@
text
@d19 1
a19 1
If the object is a blicket, predetermined by the experimenter, the light panel of the blicket detector flashes and an internal mechanism plays a short tune (Build your own! [Traditional blicket detector instructions](http://depts.washington.edu/idl/light_detail.htm)).
@


1.162
log
@vim
@
text
@d32 1
a32 1
Largely because many prominent psychologist (including Piaget) theorized that children couldn't categorize objects based on causal properties.
@


1.161
log
@vim
@
text
@d32 1
a32 1
Many psychologist (including Piaget) theorized that children couldn't categorize objects based on causal properties.
@


1.160
log
@vim
@
text
@d29 1
a29 1
Blickets were first used in a seminal developmental study by Gopnik & Sobel (2000).
@


1.159
log
@vim
@
text
@d30 3
a32 2
They looked at how the causal properties of an object (e.g., making a blicket detector flash and play music) shape toddlers conceptual knowledge.
That is, do toddlers categorize objects based on ).
@


1.158
log
@vim
@
text
@d3 1
a3 1
 This repository provides instructions, materials, and code for creating Sifteo "blickets." Sifteo blocks not required.
@


1.157
log
@vim
@
text
@d3 1
a3 1
 This repository provides instructions, materials, and code for creating Sifteo "blickets."
@


1.156
log
@vim
@
text
@d30 1
a30 1
They looked at how causal properties (e.g., making a blicket detector flash and play music) shape toddlers conceptual knowledge.
@


1.155
log
@vim
@
text
@d30 1
a30 1
They looked at how causal properties (e.g,. making a blicket detector flash and play music) shape toddlers conceptual knowledge.
@


1.154
log
@vim
@
text
@d30 1
a30 1
They looked at how causal properties (making a blicket detector flash and play music) shape toddlers conceptual knowledge.
@


1.153
log
@vim
@
text
@d30 1
a30 1
They looked at how causal properties (setting of a blicket detector) shape toddlers conceptual knowledge.
@


1.152
log
@vim
@
text
@d16 1
a16 1
Blickets have been used extensively for over a decade as a tool for studying how people, mainly children, learn and reason about causality. 
@


1.151
log
@vim
@
text
@d10 1
a10 1
Alternatively, if researchers were to ask participants to reason about things they already have strong beliefs about or experience with (e.g., adults and politics or children and toys), it's not clear how much affect a 15 minute experiment would have on getting them to change such beliefs. 
@


1.150
log
@vim
@
text
@d10 1
a10 1
Alternatively, if researchers were to ask participants to reason about things they already have strong beliefs about or experience with (e.g., adults and politics or children and toys), it's not clear how much affect a 15 minute experiment would have on getting them to change such a belief. 
@


1.149
log
@vim
@
text
@d10 1
a10 1
Alternatively, if researchers ask participants to reason about things they already have strong beliefs about or experience with (e.g., adults and politics or children and toys), it's not clear how much affect a 15 minute experiment would have on getting them to change such a belief. 
@


1.148
log
@vim
@
text
@d3 1
a3 1
 This repository provides instructions for creating Sifteo "blickets."
@


1.147
log
@vim
@
text
@d3 1
a3 1
 This repo provides instructions for creating Sifteo "blickets."
d30 2
a31 1
They looked at how causal properties (setting of a blicket detector) shaped toddlers conceptual knowledge (i.e., do they categorize objects based on ).
@


1.146
log
@vim
@
text
@d30 1
a30 1
They wanted to understand how causal properties (setting of a blicket detector) shaped toddlers conceptual knowledge (i.e., do they categorize objects based on ).
@


1.145
log
@vim
@
text
@d29 1
a29 1
Blickets were first used in a seminal study by Gopnik & Sobel (2000).
@


1.144
log
@vim
@
text
@d29 1
a29 1
The seminal blicket study was conducted by Gopnik & Sobel (2000).
@


1.143
log
@vim
@
text
@d21 1
a21 1
Traditionally, the detector is set off by a hidden switch toggled by the experimenter's foot.
d30 1
a30 1
They wanted to understand how causal properties (setting of a blicket detector) shaped toddlers conceptual knowledge. 
@


1.142
log
@vim
@
text
@a22 3
The seminal blicket study was conducted by Gopnik & Sobel (2000).
They wanted to understand how causal properties (setting of a blicket detector) shaped toddlers conceptual knowledge. 

d29 2
a30 1

@


1.141
log
@vim
@
text
@d23 2
a24 1
The seminal blicket study was conducted by Gopnik & Sobel (2000). 
@


1.140
log
@vim
@
text
@d21 1
a21 1
Traditionally, the detector is set off by a hidden switch toggled by the experimenter .
@


1.139
log
@vim
@
text
@d19 1
a19 1
If the object is a blicket, predetermined by the experimenter, the light panel of the blicket detector flashes and an internal mechanism plays a short tune (Build your own! [Traditional blicket detector instructions](http://depts.washington.edu/idl/light_detail.htm)) .
@


1.138
log
@vim
@
text
@d19 1
a19 1
If the object is a blicket, predetermined by the experimenter, the light panel of the blicket detector flashes and an internal mechanism plays a short tune.
d21 1
a21 1
Traditionally, the detector is set off by a hidden switch toggled by the experimenter (Build your own! [Traditional blicket detector instructions](http://depts.washington.edu/idl/light_detail.htm)).
@


1.137
log
@vim
@
text
@d8 1
a8 1
There's no such thing as a blicket; it's neologism created by psychologist to prevent people from having preconceived notions about what it is/isn't or what it can/can't do.
@


1.136
log
@vim
@
text
@d3 1
a3 1
 As described in our [blog post](), this repo provides instructions for creating Sifteo "blickets."
@


1.135
log
@vim
@
text
@d3 2
a4 1
This repo provides instructions for creating Sifteo "blickets," as described in our [blog post]().
@


1.134
log
@vim
@
text
@d3 1
a3 1
This repo provides instructions for creating Sifteo "blickets" described in our [blog post]().
d22 1
a22 1
The seminal blicket study was conducted by Gopnik & Sobel (2000).
@


1.133
log
@vim
@
text
@d20 1
a20 1
Traditionally, the detector is set off by a hidden switch toggled by the experimenter (Build your own! [traditional blicket detector instructions](http://depts.washington.edu/idl/light_detail.htm)).
@


1.132
log
@vim
@
text
@d20 1
a20 1
Traditionally, the detector is set off by a hidden switch toggled by the experimenter (You can even build your own! [traditional blicket detector instructions](http://depts.washington.edu/idl/light_detail.htm)).
@


1.131
log
@vim
@
text
@d20 1
a20 1
Traditionally, the detector is set off by a hidden switch toggled by the experimenter (You could build your own! [traditional blicket detector instructions](http://depts.washington.edu/idl/light_detail.htm)).
@


1.130
log
@vim
@
text
@d20 1
a20 1
Traditionally, the detector is set off by a hidden switch toggled by the experimenter (Build your own! [traditional blicket detector instructions](http://depts.washington.edu/idl/light_detail.htm)).
@


1.129
log
@vim
@
text
@d20 1
a20 1
Traditionally, the detector is set off by a hidden switch toggled by the experimenter (Build your own! [traditional blicket detector instructions](http://depts.washington.edu/idl/light_detail.htm).
@


1.128
log
@vim
@
text
@d19 2
a20 2
In reality, the "blicketness" of an object is entirely arbitrary, so their's no way to actually detect it. 
Traditionally, the detector is set off by a hidden switch toggled by the experimenter.
a29 1
[Traditional blicket detector instructions](http://depts.washington.edu/idl/light_detail.htm)
@


1.127
log
@vim
@
text
@d20 1
a20 1
Traditionally, The detector is set off by a hidden switch toggled by the experimenter.
@


1.126
log
@vim
@
text
@d20 1
a20 1
Traditionally, the detector is set off by a hidden switch toggled by the experimenter.
d22 1
a22 1
The seminal study was conducted by Gopnik & Sobel (2000).
@


1.125
log
@vim
@
text
@d19 2
a20 1
In reality, the "blicketness" of an object is entirely arbitrary, so their's no way to actually detect it. The detector is set off by a hidden switch toggled by the experimenter.
@


1.124
log
@vim
@
text
@d19 1
a19 1
In reality, the "blicketness" of an object is entirely arbitrary, so their's no way to actually detect it. Surreptitiously, the detector is set off by a hidden switch toggled by the experimenter.
@


1.123
log
@vim
@
text
@d19 1
a19 1
In reality, the "blicketness" of an object is entirely arbitrary, so their's no way to actually detect it. Traditionally, the detector is set off by a hidden switch toggled by the experimenter surreptitiously.
@


1.122
log
@vim
@
text
@d19 1
a19 1
In reality, the "blicketness" of an object is entirely arbitrary, so their's no way to actually detect it. Traditionally, the detector is set off by a hidden switch toggled by the experimenter.
@


1.121
log
@vim
@
text
@d19 1
a19 1
In reality, the "blicketness" of an object is entirely arbitrary, so their's no way to actually detect it. Traditionally, the detector is set off by a hidden switch triggered by the experimenter.
@


1.120
log
@vim
@
text
@d19 1
a19 1
In reality, the "blicketness" of an object is entirely arbitrary, so their's no way to actually detect it. Because of this, the detector is set off by a hidden switch triggered by the experimenter.
@


1.119
log
@vim
@
text
@d19 2
a20 1
In reality, the "blicketness" of an object is entirely arbitrary, so their's no way to actually detect it.
@


1.118
log
@vim
@
text
@d19 1
@


1.117
log
@vim
@
text
@d16 1
a16 1
These studies use a blicket detector (shown below on the right) to identify blickets.
@


1.116
log
@vim
@
text
@d17 1
a17 1
The experimenter places objects on top of the blicket detector.
@


1.115
log
@vim
@
text
@d17 2
a18 2
The experimenter places objects are placed on top of the blicket detector.
If the object is a blicket, predetermined by the experimenter, the blicket detector flashes and plays a short tune.
@


1.114
log
@vim
@
text
@a10 2
Wikionary defines a blicket as

@


1.113
log
@vim
@
text
@d10 1
@


1.112
log
@vim
@
text
@d30 1
a30 2
##How do Sifteo blocks help?
Brief description and links
d73 3
@


1.111
log
@vim
@
text
@d19 1
a19 1
If the object is a blicket, as predetermined by the experimenter, the blicket detector flashes and plays a short tune.
@


1.110
log
@vim
@
text
@d19 1
a19 1
If the object is a blickets (as determined by the experimenter), the blicket detector flashes and plays a short tune.
@


1.109
log
@vim
@
text
@d19 1
a19 1
If they are in fact blickets, the blicket detector flashes and plays a short tune.
@


1.108
log
@vim
@
text
@d18 2
a19 1
Objects are placed on top of the blicket detector, if they are in fact blickets, the blicket detector flashes and plays a short tune.
@


1.107
log
@vim
@
text
@d17 1
a17 1
These studies use a blicket detector (shown below) to identify blickets.
@


1.106
log
@vim
@
text
@d16 1
a16 1
Blickets have been used extensively for over a decade as a tool for studying how people, mainly children, reason about causality. 
@


1.105
log
@vim
@
text
@d16 3
a18 1
Blickets have been used extensively for over a decade as a tool for studying how people, mainly children, reason about causality.
@


1.104
log
@vim
@
text
@a4 4
**blicket** (n. *plural* blickets)

1. (*philosophy*) An object with certain properties causing it to trigger a "blicket detector" (a device that lights up and plays music), introduced in certain experiments relating to causality and perception ([wikitonary](http://en.wiktionary.org/wiki/blicket)).

d9 6
a14 1
Alternatively, if researchers ask participants to reason about things they already have strong beliefs about or experience with (e.g., adults and politics or children and toys), it's not clear how much affect a 15 minute experiment would have on getting them to change such a belief.
@


1.103
log
@vim
@
text
@d13 1
a13 1
Alternatively, if researchers ask participants to reason about things they already have strong beliefs about or experience with (e.g., adults and politics or children and toys), it's not clear how much affect a 20-30 minute experiment would have on getting them to change such a belief.
@


1.102
log
@vim
@
text
@d13 1
a13 1
Alternatively, if researchers ask participants to reason about things they already have strong beliefs about or experience with (e.g., adults and politics or children and toys), it's not clear how much affect a 10 minute experiment would have on getting them to change such a belief.
d16 1
a16 1
Describe Gopnik & Sobel (2000) Exp 1
@


1.101
log
@vim
@
text
@d13 1
a13 1
Alternatively, if researchers ask participants to reason about things they already have strong beliefs about or experience with (toys, children; religion, adults), it's not clear how much affect a 10 minute experiment would have on getting them to change such a belief.
@


1.100
log
@vim
@
text
@d13 1
a13 1
Alternatively, if researchers ask participants to reason about things they already have strong beliefs about or experience with, it's not clear how much affect a 10 minute experiment would have on getting them to change such a belief.
@


1.99
log
@vim
@
text
@d7 1
a7 1
1. (*philosophy*) An object with certain properties causing it to trigger a "blicket detector" (a device that lights up and plays music), introduced in certain experiments relating to causality and perception. ([wikitonary](http://en.wiktionary.org/wiki/blicket))
@


1.98
log
@vim
@
text
@d7 1
a7 1
1. (*philosophy*) An object with certain properties causing it to trigger a "blicket detector" (a device that lights up and plays music), introduced in certain experiments relating to causality and perception. [wikitonary](http://en.wiktionary.org/wiki/blicket) 
@


1.97
log
@vim
@
text
@d7 1
a7 1
1. (*philosophy*) An object with certain properties causing it to trigger a "blicket detector" (a device that lights up and plays music), introduced in certain experiments relating to causality and perception.[wikitonary](http://en.wiktionary.org/wiki/blicket) 
@


1.96
log
@vim
@
text
@d7 1
a7 1
1. (*philosophy*) An object with certain properties causing it to trigger a "blicket detector" (a device that lights up and plays music), introduced in certain experiments relating to causality and perception.
a13 1
Formally, [wikitonary](http://en.wiktionary.org/wiki/blicket) defines it as:
@


1.95
log
@vim
@
text
@d13 1
a13 1
Alternatively, if researchers ask participants to reason about things they have strong beliefs about or experience with, it's not clear how much affect a 10 minute experiment would have on getting them to change such a belief.
@


1.94
log
@vim
@
text
@d13 1
a13 1
Alternatively, if the researcher asked participants to reason about things they have strong beliefs about or experience with, it's not clear how much affect a 10 minute experiment would have on getting them to change such a belief.
@


1.93
log
@vim
@
text
@d13 1
a13 1
Alternatively, if the researcher asked participants to reason about things they have strong beliefs about, it's not clear how much affect a 10 minute experiment would have on getting them to change such a belief.
@


1.92
log
@vim
@
text
@d13 1
a13 1

@


1.91
log
@vim
@
text
@d2 3
a9 2
This repo provides instructions for creating Sifteo "blickets" described in our [blog post]().
##What are blickets?
@


1.90
log
@vim
@
text
@d2 4
d12 1
a14 4
**blicket** (n. *plural* blickets)

1. (*philosophy*) An object with certain properties causing it to trigger a "blicket detector" (a device that lights up and plays music), introduced in certain experiments relating to causality and perception.

@


1.89
log
@vim
@
text
@d7 1
a7 1
Empty (aka blank) terms are an important tool for studying learning and reasoning because they remove or reduce prior knowledge, allowing the researcher to interpret any findings as a (more or less) direct result of their manipulation(s).
@


1.88
log
@vim
@
text
@d7 1
a7 1
Empty (aka blank) terms are an important tool for studying learning and reasoning with because they remove or reduce prior knowledge, allowing the researcher to interpret any findings as a (more or less) direct result of their manipulation(s).
@


1.87
log
@vim
@
text
@d7 1
a7 1
Empty (aka blank) terms are an important tool to study learning and reasoning with because they remove or reduce prior knowledge, allowing the researcher to interpret any findings as a (more or less) direct result of their manipulation(s).
@


1.86
log
@vim
@
text
@d6 1
a6 1
There's no such thing as a blicket; it's neologism created to prevent people from having preconceived notions about what it is/isn't or what it can/can't do.
@


1.85
log
@vim
@
text
@d7 1
a7 1
Empty (aka blank) terms are an important tool for studying learning and reasoning because they remove or reduce prior knowledge, allowing the researcher to interpret any findings as a (more or less) direct result of their manipulation(s).
@


1.84
log
@vim
@
text
@d7 1
a7 1
Empty (aka blank) terms are an important tool for researching learning and reasoning because they remove or reduce prior knowledge, allowing the researcher to interpret any findings as a (more or less) direct result of their manipulation(s).
@


1.83
log
@vim
@
text
@d7 1
a7 1
Empty (aka blank) terms are important tool in researching learning and reasoning because they remove or reduce prior knowledge, allowing the researcher to  
@


1.82
log
@vim
@
text
@d7 2
a8 1
Empty (aka blank) terms are important Research in learning and reasoning Formally, [wikitonary](http://en.wiktionary.org/wiki/blicket) defines it as:
@


1.81
log
@vim
@
text
@d7 1
a7 1
Empty (blank) terms are important Research in learning and reasoning Formally, [wikitonary](http://en.wiktionary.org/wiki/blicket) defines it as:
@


1.80
log
@vim
@
text
@d6 2
a7 1
There's no such thing as a blicket; it's neologism created to prevent people from having preconceived notions about what it is/isn't or what it can/can't do. Research in learning and reasoning Formally, [wikitonary](http://en.wiktionary.org/wiki/blicket) defines it as:
@


1.79
log
@vim
@
text
@d9 1
@


1.78
log
@vim
@
text
@d8 1
a8 4
**blicket** (*plural* blickets)

**Noun**

@


1.77
log
@vim
@
text
@d11 1
@


1.76
log
@vim
@
text
@d8 1
a8 1
**blicket** (**n.** *plural* blickets)
d10 1
@


1.75
log
@vim
@
text
@d6 1
a6 1
There's no such thing as a blicket; it's neologism created to prevent people from having preconceived notions about what it is/isn't or what it can/can't do. Formally, [wikitonary](http://en.wiktionary.org/wiki/blicket) defines it as:
d8 1
a8 1
**blicket** (*plural* blickets)
@


1.74
log
@vim
@
text
@d6 1
a6 1
There's no such thing as a blicket; it's neologism created to prevent people from having preconceived notions about what it is/isn't or what it can/can't do.
@


1.73
log
@vim
@
text
@d6 1
a6 1
There's no such thing as a blicket; it's neologism created to prevent people from having preconceived notions about what it is or what it might do.
@


1.72
log
@vim
@
text
@d9 2
a10 1
(*philosophy*) An object with certain properties causing it to trigger a "blicket detector" (a device that lights up and plays music), introduced in certain experiments relating to causality and perception.
@


1.71
log
@vim
@
text
@d8 2
a9 2
**blicket** (plural blickets)
(philosophy) An object with certain properties causing it to trigger a "blicket detector" (a device that lights up and plays music), introduced in certain experiments relating to causality and perception.
@


1.70
log
@vim
@
text
@d8 1
a8 1
_blicket_ (plural blickets)
@


1.69
log
@vim
@
text
@d8 1
a8 1
*blicket* (plural blickets)
@


1.68
log
@vim
@
text
@d8 1
a8 1
blicket (plural blickets)
@


1.67
log
@vim
@
text
@d7 4
@


1.66
log
@vim
@
text
@d7 1
a7 1
Blickets have been used for over a decade as a method for studying how people, mainly children, reason about causes.
@


1.65
log
@vim
@
text
@d6 1
a6 1
There's no such thing as a blicket, so using the so-called blank term blicket avoids any preconceved notion about what it is or might be.
@


1.64
log
@vim
@
text
@d5 3
a7 1

@


1.63
log
@vim
@
text
@d3 1
a3 1
This repo provides the materials and instructions for creating Sifteo "blickets" described in our [blog post]().
@


1.62
log
@vim
@
text
@d3 1
a3 2
##Introduction
This provides the materials and instructions for creating Sifteo "blickets" described in our [blog post]().
@


1.61
log
@vim
@
text
@d4 1
a4 1
This provides the materials and instructions for creating Sifteo "blickets."
@


1.60
log
@vim
@
text
@d4 1
a4 1
This repo accompanies our [blog post](http://), providing materials and instructions to create Sifteo "blickets."
@


1.59
log
@vim
@
text
@d4 1
a4 2
This repo provides materials and instructions for creating Sifteo "blickets" to accompany our upcoming [blog post](http://).

@


1.58
log
@vim
@
text
@d18 1
a18 1
##What are Sifteo Blocks and how do they help?
d23 1
a23 1
####Set 1: Four Identical Objects: 
@


1.57
log
@vim
@
text
@d18 1
a18 1
##What are Sifteo Blocks and how to they help?
@


1.56
log
@vim
@
text
@d23 1
a23 1
####Set 1: Four Identical Objeccts: 
@


1.55
log
@vim
@
text
@d18 4
a61 3
##What are Sifteo Blocks?
Brief description and links

@


1.54
log
@vim
@
text
@d16 1
a16 1
[Breadboard Blicket Detector](http://depts.washington.edu/idl/light_detail.htm)
@


1.53
log
@vim
@
text
@a8 1
[Breadboard Blicket Detector](http://depts.washington.edu/idl/light_detail.htm)
d16 2
@


1.52
log
@vim
@
text
@d4 1
a4 1
This repo provides materials and detailed instructions for creating Sifteo "blickets" to accompany our upcoming [blog post](http://).
@


1.51
log
@vim
@
text
@d4 1
a4 1
This repo provides materials and detailed instructions for creating Sifteo "blickets" to accompany our [blog post](http://).
@


1.50
log
@vim
@
text
@d12 1
d15 1
@


1.49
log
@vim
@
text
@d10 1
@


1.48
log
@vim
@
text
@d12 1
a12 1
[blicket_gugs]: http://depts.washington.edu/idl/images/blicket_internal_bottom.jpg
@


1.47
log
@vim
@
text
@d7 1
d11 3
a13 1
[blicket_gugs]:(http://depts.washington.edu/idl/images/blicket_internal_bottom.jpg)
@


1.46
log
@vim
@
text
@d9 2
a10 1

@


1.45
log
@vim
@
text
@d48 1
a48 1
[screen_shot]: https://github.com/jbmartin/SifteoBlickets/blob/master/blog_assets/screenshot.png?raw=true
@


1.44
log
@vim
@
text
@d46 1
d48 1
@


1.43
log
@vim
@
text
@d45 3
@


1.42
log
@vim
@
text
@d31 1
a31 1
![][red_rect]  ![][red_rect]  ![][yellow_sq] ![][yellow_sq]
a35 1
[yellow_sq]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/yellow_sq.png?raw=true
@


1.41
log
@vim
@
text
@d36 1
@


1.40
log
@vim
@
text
@d30 2
a31 2
####Set 4: Conflicts Shape and Color:
![][green_sq]  ![][blue_oval]  ![][red_tri] ![][yellow_rounded_rect]
@


1.39
log
@vim
@
text
@d27 2
a28 2
####Set 4: Same Color Conflicts Shape:
![][green_sq]  ![][blue_oval]  ![][red_tri] ![][yellow_rounded_rect]
@


1.38
log
@vim
@
text
@d43 1
@


1.37
log
@vim
@
text
@d25 1
a25 1
![][green_rounded_rect]  ![][green_rounded_rect]  ![][blue_rounded_rect] ![][blue_rounded_rect]
@


1.36
log
@vim
@
text
@d25 1
a25 1
![][green_rounded_rect]  ![][green_rounded_rect]  ![][yellow_rounded_rect] ![][yellow_rounded_rect]
@


1.35
log
@vim
@
text
@d24 2
a25 2
####Set 4: Same Shape Conflicts Color:
![][green_sq]  ![][blue_oval]  ![][red_tri] ![][yellow_rounded_rect]
@


1.34
log
@vim
@
text
@a32 5





@


1.33
log
@vim
@
text
@d24 11
@


1.32
log
@vim
@
text
@d34 1
@


1.31
log
@vim
@
text
@d19 1
a19 1
![][green_sq]  ![][blue_oval]  ![][red_tri] ![][yellow_rounded_rect]
@


1.30
log
@vim
@
text
@d18 2
d21 1
a21 1
####Set 3: Same Shape Different Color:
d24 3
@


1.29
log
@vim
@
text
@d30 1
@


1.28
log
@vim
@
text
@d29 1
@


1.27
log
@vim
@
text
@d20 1
a20 1
![][green_rect]  ![][green_rect]  ![][green_rounded_rect] ![][green_rect]
d22 7
a28 6
[green_rect]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/green_rect.png?raw=true "Logo Title Text 2"
[red_rect]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/red_rect.png?raw=true "Logo Title Text 2"
[yellow_rect]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/yellow_rect.png?raw=true "Logo Title Text 2"
[green_oval]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/green_oval.png?raw=true "Logo Title Text 2"
[green_sq]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/green_sq.png?raw=true "Logo Title Text 2"
[green_rounded_rect]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/green_rounded_rect.png?raw=true "Logo Title Text 2"
@


1.26
log
@vim
@
text
@d15 1
a15 1
####Set 1: Same Color Different Shape:
d18 2
@


1.25
log
@vim
@
text
@d18 1
a18 1
![][green_rect]  ![][green_rect]  ![][green_rect] ![][green_rect]
d25 1
@


1.24
log
@vim
@
text
@d16 1
a16 1
![][green_rect]  ![][green_rect]  ![][green_rect] ![][green_rect]
d23 2
@


1.23
log
@vim
@
text
@d14 2
@


1.22
log
@vim
@
text
@d10 3
a12 2
####Materials
Set 1: Four Identical Objeccts: ![][green_rect]  ![][green_rect]  ![][green_rect] ![][green_rect]
@


1.21
log
@vim
@
text
@d11 2
@


1.20
log
@vim
@
text
@d10 1
a10 1
###Materials
@


1.19
log
@vim
@
text
@d12 1
@


1.18
log
@vim
@
text
@d10 2
@


1.17
log
@vim
@
text
@d10 1
a10 1
![][green_rect]  ![][green_rect]  ![][green_rect]
@


1.16
log
@vim
@
text
@d10 1
a10 1
![][green_rect]  ![][red_rect]  ![][yellow_rect]
@


1.15
log
@vim
@
text
@d10 1
a10 1
![green rectangle][green_rect]  ![green rectangle][red_rect]  ![green rectangle][yellow_rect]
@


1.14
log
@vim
@
text
@d14 1
a14 1
[yellow_rect]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/red_rect.png?raw=true "Logo Title Text 2"
@


1.13
log
@vim
@
text
@d14 1
@


1.12
log
@vim
@
text
@d10 1
a10 3
|--------------------------------|---------------------------------|
| ![green rectangle][green_rect] | ![green rectangle][red_rect]    |
|                                |                                 |
@


1.11
log
@vim
@
text
@d15 1
@


1.10
log
@vim
@
text
@d11 2
a12 1
| ![green rectangle][green_rect] | ![green rectangle][red_rect]  |
@


1.9
log
@vim
@
text
@d9 3
a11 1
![green rectangle][green_rect]
@


1.8
log
@vim
@
text
@d11 1
a11 1
[green_rect]: https://github.com/jbmartin/SifteoBlickets/blob/master/assets/green_rect.png "Logo Title Text 2"
@


1.7
log
@vim
@
text
@d9 3
@


1.6
log
@vim
@
text
@d23 1
a23 3
1. Making sprites (animations)
2. Neighborhoods
3. Shake and tilt
@


1.5
log
@vim
@
text
@d22 1
a22 1
1. Interventions (Touch screen)
@


1.4
log
@vim
@
text
@d11 1
a11 1
Brief description 
@


1.3
log
@vim
@
text
@d19 1
a19 1
5.
d22 1
@


1.2
log
@vim
@
text
@d18 2
a19 2
4. Run simulator
5. ...
@


1.1
log
@vim
@
text
@a4 1
Normal constructions [Blicket Detector](http://depts.washington.edu/idl/light_detail.htm)
d8 1
@
